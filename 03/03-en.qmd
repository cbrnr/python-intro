---
title: "3 – Names, Expressions, Statements"
subtitle: "Introduction to Python and PsychoPy"
author: "Clemens Brunner"
date: 2024-10-17
format:
  html:
    page-layout: full
engine: jupyter
highlight-style: github
title-block-banner: true
theme:
  light: flatly
  dark: darkly
---

## Objects, values, and types

Everything in Python is an *object*. An object has a specific value, e.g.

```{python}
1
```

```{python}
2.15
```

```{python}
"Hello"
```

```{python}
"3"
```

:::{.callout-tip}
Python prints values automatically in interactive mode.
:::

Every object has a specific type. You can determine the type of an object with the `type` function:

```{python}
type(1)
```

```{python}
type(2.15)
```

```{python}
type("Hello")
```

```{python}
type("3")
```

Python is a dynamically typed language. This means that Python checks whether a certain operation can be applied to an object of a certain type (e.g. "can this object be multiplied by two?") at *runtime* (i.e., while the program is already running). In practice, this means that types do *not* have to be explicitly specified in Python.

Python has more types than the ones mentioned above. We will learn about more useful data types like lists, tuples, and dictionaries throughout this course.


## Names

Names are just names for objects in Python (in other programming languages, names are usually called variables). For example, the assignment `a = 1` can be interpreted as the object `1` getting the name `a`. An object can have multiple names, as illustrated in the following example.

```{python}
a = 1
```

![](a1.png)

```{python}
a = 2.4
```

![](a2.png)

```{python}
b = a
```

![](a3.png)

After the last assignment, the object 2.4 has two names – `a` and `b` both refer to the same object.

The type of a name corresponds to the type of the object it refers to:

```{python}
type(a)
```

```{python}
type(b)
```


## Valid and good names

Names can contain letters and digits, but they cannot start with a digit. In general, you should use lowercase letters (Python is case-sensitive). Names can be arbitrarily long, but they should be as short as possible (but as long as necessary). Additionally, you can use the underscore `_` character to make a name more readable, such as separating words.

:::{.callout-tip}
Names should be chosen wisely, i.e., they should document the use or content (so short names like `i`, `n`, and `x` are only useful in exceptional cases). It is also reasonable to use English names even if you are not a native English speaker.
:::

Here are some examples of valid names:

```{python}
number_of_students_in_class = 23  # too long
NumberOfStudents = 24  # words should be separated by underscores
n_students = 25  # good name (short and descriptive)
n = 25  # not that great (too unspecific, but okay in some cases)
```

Python has some predefined names (so-called *keywords*) that must *not* be used as your own names, as they are needed by the Python interpreter to understand the structure of a program. You can get a list of all keywords with the following commands:

```{python}
import keyword
keyword.kwlist
```

Besides keywords, there are also so-called *built-ins*, which are objects (functions and other objects) that are always available without importing. It is not advisable to "overwrite" these built-ins (although this is not explicitly forbidden). You can get a list of all built-ins with the following command:

```{python}
#| scrolled: false
dir(__builtins__)
```

Let's consider the `max` function, which determines the maximum of a list of numbers:

```{python}
max(1, 88, 7)
```

We can inspect the type of `max` to verify that it is indeed a built-in function:

```{python}
type(max)
```

Therefore, we should avoid using the name `max` for our own objects, as the original built-in function would no longer be available. However, this is not explicitly forbidden:

```{python}
max = 4  # not recommended
```

Let's now look at the type of `max`:

```{python}
type(max)
```

```{python}
max
```

As expected, `max` is now a name that refers to the `int` object 4. The original built-in function is now shadowed, which means that we can no longer call it:

```python
max(1, 88, 7)
```
```
TypeError: 'int' object is not callable
```

Luckily, we can delete the name `max` that we defined with the `del` keyword, which makes the built-in function available again:

```{python}
del max
type(max)
```


## Operators

Operatoren sind spezielle Symbole, mit denen man Berechnungen wie Additionen, Subtraktionen usw. durchführen kann, also z.B. `+`, `-`, `*`, `/`, `**`, `//`, `%`, usw. Wir haben einige Operatoren bereits bei der Verwendung von Python als Taschenrechner kennengelernt.
Operators are special symbols that allow us to perform operations like addition, subtraction, and so on. We have already learned about some operators when using Python as a calculator, such as `+`, `-`, `*`, `/`, `**`, `//`, `%`, etc.


## Expressions

An expression is a combination of values, variables, and operators. Every expression has a value. Examples:

```{python}
17
```

```{python}
23 + 4**2 - 2
```

```{python}
n  # defined previously
```

```{python}
n + 5
```

:::{.callout-important}
Python always reduces an expression to *a single value*. Also, note that Python automatically prints values in interactive mode.
:::


## Statements

A statement is a unit of code that the Python interpreter can execute. An expression is a (special) statement that has a value. Examples of statements that are not expressions:

```{python}
x = 34  # assignment
```

```{python}
print("Python")
```

The previous two examples do not have any output – this is because these two statements do not have any values, i.e., there is nothing to output in the interactive mode of the Python interpreter.

:::{.callout-note}
The fact that calling the `print` function still results in an output on the screen is due to the function, whose purpose is exactly this output. This can be seen when assigning a name to the function call:

```{python}
s = print("Python")
```

The type of the value of `print("Python")`, which now has the name `s`, is:

```{python}
type(s)
```

This demonstrates that `print("Python")` does not have a value (technically, `None` is the special value that represents the absence of a value in Python).
:::


## Data types

Python comes with a lot of useful data types. The most important types are listed and briefly described below. A more detailed treatment of selected (important) data types will follow in the next sessions.


### Logical type

The `bool` type is used for comparisons; there are only two possible values, namely `True` and `False`.

```{python}
b = True
type(b)
```

```{python}
c = False
type(c)
```


### Numeric types

- `int` (integer numbers)
- `float` (decimal numbers)
- `complex` (complex numbers)

```{python}
a = 17
type(a)
```

```{python}
a = 23.221
type(a)
```

Because computers represent decimal numbers with limited precision, rounding errors can occur (decimal numbers cannot generally be represented exactly). Example:

```{python}
0.1 + 0.2
```

Therefore, it is dangerous to compare decimal numbers:

```{python}
0.1 + 0.2 == 0.3
```

:::{.callout-note}
Instead of comparing decimal numbers with `==`, it is better to check whether the difference between the two numbers is very small. For this purpose, there is a special function `math.isclose` in the `math` module, which can be used as follows:

```{python}
import math

math.isclose(0.1 + 0.2, 0.3)
```
:::

Comparing integers is not a problem, as these numbers are always represented exactly.

Some special applications require complex numbers, which are directly supported by Python. The imaginary unit is represented by `j`.

```{python}
a = 3 + 5.5j
type(a)
```


### Sequence types

Sequence data types can contain multiple elements. The following important sequence data types are supported by Python:

- `str` (string of characters)
- `list` (list of arbitrary elements)
- `tuple` (similar to lists, but cannot be changed after creation)
- `set` (set of unique elements)

```{python}
s = "Python"
type(s)
```

```{python}
s = 'String'
type(s)
```

```{python}
k = [1, 2, 18.33, "Python", 44]
type(k)
```

```{python}
t = 1, 2, 18.33, "Python", 44
type(t)
```

```{python}
s = {1, 2, "test", "test", "test", 1, 2, 3}
s
```

```{python}
type(s)
```


### Mapping types

The mapping type `dict` contains key-value pairs. This mechanism works similar to a real dictionary (hence the name).

```{python}
d = {"a": 12, "b": 3.14, 5: "Python", "c": "yes"}
type(d)
```


## Exercises

### Exercise 1

Given the following statements:

```python
width = 17
height = 12
delimiter = "."
```

Specify the value and type of each of the following expressions. Try to determine the answers by reasoning first and only then use the Python interpreter to check your answers.

- `width / 2`
- `height / 3`
- `height * 3`
- `height * 3.0`
- `delimiter * 5`
- `2 * (width + height) + 1.5`
- `12 + 3`
- `"12 + 3"`


### Exercise 2

What is the difference between an expression and a statement? Provide an example for each of these concepts.


### Exercise 3

What are keywords in Python and how do you get a list of all keywords? What are built-ins and how do you get a list of all built-ins? What do you have to consider when creating names in the context of these two concepts? Also, provide some guidelines on how to create good names. Give an example of a good name!


### Exercise 4

Wie groß ist die Oberfläche bzw. das Volumen einer Kugel mit einem Radius von $r=5$? Führen Sie die Berechnung mit Python durch und weisen Sie den Ergebnissen die Namen `area` bzw. `volume` zu. Verwenden Sie für den Radius den Namen `r` und setzen Sie den Wert von `r` auf 5.
What is the surface area and volume of a sphere with a radius of $r=5$? Perform these calculations with Python and assign the results to the names `area` and `volume`, respectively. Use the name `r` for the radius and set the value of `r` to 5.

:::{.callout-note}
You can use the number $\pi$ as `math.pi` if you add the following line at the very beginning of your script:

```python
import math
```

The formula for the surface area $A$ of a sphere is:

$$A = 4 \pi r^2$$

The volume $V$ of a sphere can be calculated with the following formula:

$$V = \frac{4}{3} \pi r^3$$
:::


### Exercise 5

Which command can you use to determine the type of the value `True`? What type is it? What type does the name `x` have if you execute `x = "True"` beforehand? Note: the values `True` and `"True"` in this example have different types!

If you executed the command `import math` in Exercise 4, what type does the name `math` have?
