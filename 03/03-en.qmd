---
title: "3 – Names, Expressions, Statements"
subtitle: "Introduction to Python and PsychoPy"
author: "Clemens Brunner"
date: 2024-10-17
format:
  html:
    page-layout: full
engine: jupyter
highlight-style: github
title-block-banner: true
theme:
  light: flatly
  dark: darkly
---

## Objects, values, and types

Everything in Python is an *object*. An object has a specific value, e.g.

```{python}
1
```

```{python}
2.15
```

```{python}
"Hello"
```

```{python}
"3"
```

:::{.callout-tip}
As we already know, Python outputs the *value* of the last command automatically in the REPL (the interactive interpreter).
:::

Every object has a specific type. You can determine the type of an object with the `type` function:

```{python}
type(1)
```

```{python}
type(2.15)
```

```{python}
type("Hello")
```

```{python}
type("3")
```

Conceptually, we can think of an object as an entity of a specific type with a specific value living in the computer's memory:

![A Python object.](python_object.png)

Each object also has a unique identifier. We can use the `id` function to find out:

```{python}
id(3)
```

```{python}
id(4)
```

The actual identifier numbers are irrelevant (and probably different on your computer). The only thing that's interesting about these identifiers is whether or not they are identical. In the previous example, the object `3` has a different identifier than the object `4`, so we know that these are two different objects.


## Names

Objects can have names (in other programming languages, names are often called variables). We can assign a name to an object with the assignment operator `=` as follows:

```{python}
a = 1
```

This attaches the name `a` to the object `1` (of type `int`). We can visualize names as tags or labels attached to an object.

![The name `a` is attached to the object `1`. Another object `2.4` does not have a name.](python_names_1.png)

Python lets us reassign an existing name to a different object. Notice how the object on the left does not have a name anymore after we re-assign `a`:

```{python}
a = 2.4
```

![Now `a` is attached to the object `2.4`, and the object `1` does not have a name anymore.](python_names_2.png)

An object can also have more than one name attached to it:

```{python}
b = a
```

![Now the object `2.4` has two names `a` and `b`.](python_names_3.png)

We can confirm that `a` and `b` point to the same object by inspecting their corresponding identifiers:

```{python}
id(a)
```

```{python}
id(b)
```

Indeed, they are identical, so there is just one object with two names. If we want to check if two names are attached to one and the same object, we can also use the `is` keyword as a shortcut:

```{python}
a is b
```

The type of a name corresponds to the type of the object the name is attached to:

```{python}
type(a)
```

```{python}
type(b)
```

Whenever Python works with a name, it always replaces it with the value of the corresponding object. Furthermore, Python always evaluates the right-hand side of an assignment first before assigning the name. Consider the following example:

```{python}
x = 11
9 + x  # x is evaluated to 11, then 9 + 11 is evaluated to 20
```

After this line, `x` still has the value `11`:

```{python}
x
```

We now reassign the name `x` to a different object `2`:

```{python}
x = 2
2 * x  # x is evaluated to 2, then 2 * 2 is evaluated to 4
```

After this line, `x` has the value `2`. However, we can reassign `x` again and even use the old value of `x` in the right-hand side of the assignment:

```{python}
x = 2 * x  # first evaluate the right-hand side to 2 * 2 = 4, then assign x = 4
x
```


## Choosing names

### Basic rules

Valid names can contain letters (lower and upper case), digits, and underscores (but a name cannot start with a digit). [PEP8](https://www.python.org/dev/peps/pep-0008/#naming-conventions) lists recommendations for choosing good names – we only need to remember one rule for now: almost all names should be lowercase, and if necessary can also contain underscores, such as `lower_case_with_underscores`.

Names should convey meaning, so instead of a generic `x` or `i`, we should try to find a name that tells us something about its intended use. Also, it is good practice to use English (and not e.g. German) names, because you never know who will read your code in the future.

Here are a few examples for naming an object which represents the number of students in a school class:

```{python}
number_of_students_in_class = 23  # too long
NumberOfStudents = 23  # wrong style, not separated with underscores
n_students = 23  # pretty nice
n = 23  # probably too short (but may be OK sometimes)
```


### Keywords

Python defines several reserved keywords that are a core part of the language. They *cannot* be used to name objects, so it is important to know what they are. The following code snippet produces a list of all keywords:

```{python}
import keyword
keyword.kwlist
```

For example, this means that you cannot use the name `lambda`. If you do, Python will generate an error:

```{python}
#| error: true
lambda = 7
```


### Built-in functions

Python also has a number of [built-in functions](https://docs.python.org/3/library/functions.html) that are always available (without importing). Although it is possible to assign the names of these built-in functions to other objects, it is considered bad practice, because it might lead to subtle bugs. The following code generates a list of all built-ins:

```python
dir(__builtins__)
```

:::{.callout-tip}
If you really want to use a name that is already taken by a built-in function, it is better to change the name slightly by appending an underscore. For example, instead of using `lambda`, you could use `lambda_`.
:::


## Operators

In general, operators work with objects. We have already used several (arithmetic) operators such as `+`, `-`, `*`, `/`, `**`, `//`, and `%`. Some operators are *binary* and require *two* operands (for example, the multiplication `2 * 3`), whereas other operators are *unary* and require only *one* operand (for example, the negation `-5`).


## Expressions

An *expression* is any combination of values, names, and operators. Importantly, an expression *always evaluates to a single value* (or short, an expression *has* a value). Here are a few examples for expressions (remember that their values are automatically printed in the REPL):

```{python}
17  # just one value
```
   
```{python}
23 + 4**2 - 2  # four values and three operators
```

```{python}
n = 25  # an assignment is not an expression!
```

```{python}
n  # one name (evaluates to its value)
```

```{python}
n + 5  # a name, an operator, and a value
```

Python reduces an expression to a *single value*. A more complex expression is evaluated step by step according to operator precedence rules (think [PEMDAS](https://en.wikipedia.org/wiki/Order_of_operations#Mnemonics)) from left to right. As we've already discussed, Python evaluates the right-hand side of an assignment first before assigning a name.


## Statements

A statement is a unit of code which Python can run. This is a rather broad definition, and statements therefore include expressions as a special case (in other words, an expression is a statement with a value). However, there are also statements that do *not* have a value, such as an assignment. Here are two examples for statements that are not expressions:

```{python}
x = 13
print("Hello world!")
```

Note that although the `print` statement generates output, this output is not its value (try assigning a name to the function call)!


## Data types

Python comes with a lot of useful data types. The most important types are listed and briefly described below. A more detailed treatment of selected (important) data types will follow in the next sessions.


### Logical type

The `bool` type is used for comparisons; there are only two possible values, namely `True` and `False`.

```{python}
b = True
type(b)
```

```{python}
c = False
type(c)
```


### Numeric types

- `int` (integer numbers)
- `float` (decimal numbers)
- `complex` (complex numbers)

```{python}
a = 17
type(a)
```

```{python}
a = 23.221
type(a)
```

Because computers represent decimal numbers with limited precision, rounding errors can occur (decimal numbers cannot generally be represented exactly). Example:

```{python}
0.1 + 0.2
```

Therefore, it is dangerous to compare decimal numbers:

```{python}
0.1 + 0.2 == 0.3
```

:::{.callout-note}
Instead of comparing decimal numbers with `==`, it is better to check whether the difference between the two numbers is very small. For this purpose, there is a special function `math.isclose` in the `math` module, which can be used as follows:

```{python}
import math

math.isclose(0.1 + 0.2, 0.3)
```
:::

Comparing integers is not a problem, as these numbers are always represented exactly.

Some special applications require complex numbers, which are directly supported by Python. The imaginary unit is represented by `j`.

```{python}
a = 3 + 5.5j
type(a)
```


### Sequence types

Sequence data types can contain multiple elements. The following important sequence data types are supported by Python:

- `str` (string of characters)
- `list` (list of arbitrary elements)
- `tuple` (similar to lists, but cannot be changed after creation)
- `set` (set of unique elements)

```{python}
s = "Python"
type(s)
```

```{python}
s = 'String'
type(s)
```

```{python}
k = [1, 2, 18.33, "Python", 44]
type(k)
```

```{python}
t = 1, 2, 18.33, "Python", 44
type(t)
```

```{python}
s = {1, 2, "test", "test", "test", 1, 2, 3}
s
```

```{python}
type(s)
```


### Mapping types

The mapping type `dict` contains key-value pairs. This mechanism works similar to a real dictionary (hence the name).

```{python}
d = {"a": 12, "b": 3.14, 5: "Python", "c": "yes"}
type(d)
```


## Exercises

### Exercise 1

Given the following statements:

```python
width = 17
height = 12
delimiter = "."
```

Specify the value and type of each of the following expressions. Try to determine the answers by reasoning first and only then use the Python interpreter to check your answers.

- `width / 2`
- `height / 3`
- `height * 3`
- `height * 3.0`
- `delimiter * 5`
- `2 * (width + height) + 1.5`
- `12 + 3`
- `"12 + 3"`


### Exercise 2

What is the difference between an expression and a statement? Provide an example for each of these concepts.


### Exercise 3

What are keywords in Python and how do you get a list of all keywords? What are built-ins and how do you get a list of all built-ins? What do you have to consider when creating names in the context of these two concepts? Also, provide some guidelines on how to create good names. Give an example of a good name!


### Exercise 4

Wie groß ist die Oberfläche bzw. das Volumen einer Kugel mit einem Radius von $r=5$? Führen Sie die Berechnung mit Python durch und weisen Sie den Ergebnissen die Namen `area` bzw. `volume` zu. Verwenden Sie für den Radius den Namen `r` und setzen Sie den Wert von `r` auf 5.
What is the surface area and volume of a sphere with a radius of $r=5$? Perform these calculations with Python and assign the results to the names `area` and `volume`, respectively. Use the name `r` for the radius and set the value of `r` to 5.

:::{.callout-note}
You can use the number $\pi$ as `math.pi` if you add the following line at the very beginning of your script:

```python
import math
```

The formula for the surface area $A$ of a sphere is:

$$A = 4 \pi r^2$$

The volume $V$ of a sphere can be calculated with the following formula:

$$V = \frac{4}{3} \pi r^3$$
:::


### Exercise 5

Which command can you use to determine the type of the value `True`? What type is it? What type does the name `x` have if you execute `x = "True"` beforehand? Note: the values `True` and `"True"` in this example have different types!

If you executed the command `import math` in Exercise 4, what type does the name `math` have?
