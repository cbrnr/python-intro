---
title: "3 – Lösungen"
subtitle: "Einführung in Python und PsychoPy"
author: "Clemens Brunner"
date: 2025-10-16
format:
  html:
    page-layout: full
engine: jupyter
highlight-style: github
title-block-banner: true
theme:
  light: flatly
  dark: darkly
lang: de
author-title: "Autor"
published-title: "Veröffentlicht"
---

## Übung 1

```{python}
width = 17
height = 12
delimiter = "."
```

- Der Ausdruck `width / 2` hat vermutlich den Wert `8.5` (Typ `float`). Diese Vermutung kann bestätigt werden.

  ```{python}
  width / 2
  ```
  ```{python}
  type(width / 2)
  ```

- Der Ausdruck `height / 3` hat vermutlich den Wert `4` (Typ `int`). Diese Vermutung ist nicht korrekt – der tatsächliche Wert ist `4.0` (Typ `float`). Eine Division ergibt also immer Dezimalzahlen, auch wenn beide Operanden Ganzzahlen sind.

  ```{python}
  height / 3
  ```
  ```{python}
  type(height / 3)
  ```

- Der Ausdruck `height * 3` hat vermutlich den Wert `36` (Typ `int`). Diese Vermutung kann bestätigt werden.

  ```{python}
  height * 3
  ```
  ```{python}
  type(height * 3)
  ```

- Der Ausdruck `height * 3.0` hat vermutlich den Wert `36.0` (Typ `float`). Diese Vermutung ist korrekt, sobald ein Operand ein `float` ist, ist auch das Ergebnis einer Multiplikation ein `float`.

  ```{python}
  height * 3.0
  ```
  ```{python}
  type(height * 3.0)
  ```

- Der Ausdruck `delimiter * 5` ergibt vermutlich einen Fehler (einen Punkt kann man nicht mal 5 rechnen). Diese Vermutung ist allerdings falsch, denn das Ergebnis lautet `"....."` (Typ `str`) – das Zeichen `delimiter` (ein Punkt) wird also verfünffacht.

  ```{python}
  delimiter * 5
  ```
  ```{python}
  type(delimiter * 5)
  ```

- Der Ausdruck `2 * (width + height) + 1.5` hat vermutlich den Wert `59.5` (Typ `float`). Diese Vermutung ist korrekt.

  ```{python}
  2 * (width + height) + 1.5
  ```
  ```{python}
  type(2 * (width + height) + 1.5)
  ```

- Der Ausdruck `12 + 3` hat vermutlich den Wert `15` (Typ `int`).

  ```{python}
  12 + 3
  ```
  ```{python}
  type(12 + 3)
  ```

- Der Ausdruck `"12 + 3"` ist ein String und hat daher den Wert `"12 + 3"` (Typ `str`). Daher kann damit auch nichts ausgerechnet werden, da es sich nur um eine Sequenz an Zeichen handelt.

  ```{python}
  "12 + 3"
  ```
  ```{python}
  type("12 + 3")
  ```


## Übung 2

Eine Anweisung ist eine Einheit von Code, welcher vom Python-Interpreter ausgeführt werden kann. Es gibt Anweisungen, die einen Wert haben und Anweisungen, die keinen Wert haben. Erstere (also Anweisungen mit Wert) nennt man auch Ausdrücke. Beispiele:

```{python}
12 + 5  # Ausdruck (Anweisung mit Wert)
```

```{python}
type(5)  # Ausdruck (Anweisung mit Wert)
```

```{python}
x = 12 + 5  # Anweisung (Zuweisung)
print(x)  # Anweisung
```

Im interaktiven Modus gibt Python die Werte von Ausdrücken automatisch aus. Im Script-Modus ist dies jedoch nicht der Fall, hier müssen Werte explizit mit der `print`-Funktion ausgegeben werden.


## Übung 3

Schlüsselwörter sind vordefinierte Namen, die Python zum Verstehen eines Python-Scripts benötigt. Eine Liste aller Schlüsselwörter bekommt man mit:

```python
import keyword
print(keyword.kwlist)
```

Eingebaute Funktionen sind mit Python mitgelieferte Funktionen, welche ohne jeglichen Import sofort verfügbar sind. Eine Liste bekommt man mit:

```python
dir(__builtins__)
```

Bei der Namensgebung ist zu beachten, dass Schlüsselwörter nicht als Namen verwendet werden können (dies führt zu einer Fehlermeldung). Eingebaute Funktionen sollten prinzipiell ebenfalls nicht für eigene Namen verwendet werden (jedoch wäre dies technisch möglich).

Gute Namen sollten selbsterklärend sein und auf ihren Verwendungszweck hinweisen. Sie sollten so kurz wie möglich, aber dennoch so lang wie notwendig sein. Prinzipiell sollte man englische Begriffe als Namen verwenden. Ebenso hat es sich eingebürgert, dass Namen nur aus Kleinbuchstaben bestehen sollten, gegebenenfalls kann man einen Unterstrich `_` zur Trennung von Wörtern verwenden.

Beispiel für einen Namen, welcher die Anzahl an Versuchspersonen beinhaltet:

```python
n_subjects = 14
```


## Übung 4

```{python}
import math

r = 5
area = 4 * r**2 * math.pi
volume = 4/3 * math.pi * r**3
print(area, volume)
```


## Übung 5

```{python}
type(True)
```
```{python}
x = "True"
type(x)
```
```{python}
type(math)
```
