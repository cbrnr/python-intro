---
title: "1 – Lösungen"
subtitle: "Einführung in Python und PsychoPy"
author: "Clemens Brunner"
date: 2022-10-06
format: html
engine: jupyter
highlight-style: github
title-block-banner: true
theme:
  light: flatly
  dark: darkly
lang: de
author-title: "Autor"
published-title: "Veröffentlicht"
---

## Übung 1

Die installierte Python-Version ist 3.10.6. Dies ist nicht ganz die aktuellste Version 3.10.7.

![](python_version.png)


## Übung 2

`import antigravity` öffnet den Webbrowser mit dem [xkcd-Comic über Python](https://xkcd.com/353/).

`import this` gibt das Zen von Python am Bildschirm aus:

> | *The Zen of Python, by Tim Peters*
> |
> | Beautiful is better than ugly.
> | Explicit is better than implicit.
> | Simple is better than complex.
> | Complex is better than complicated.
> | Flat is better than nested.
> | Sparse is better than dense.
> | Readability counts.
> | Special cases aren't special enough to break the rules.
> | Although practicality beats purity.
> | Errors should never pass silently.
> | Unless explicitly silenced.
> | In the face of ambiguity, refuse the temptation to guess.
> | There should be one -- and preferably only one -- obvious way to do it.
> | Although that way may not be obvious at first unless you're Dutch.
> | Now is better than never.
> | Although never is often better than \textbf{right} now.
> | If the implementation is hard to explain, it's a bad idea.
> | If the implementation is easy to explain, it may be a good idea.
> | Namespaces are one honking great idea -- let's do more of those!

Der Befehl `import math` bewirkt, dass man danach die im Modul `math` enthaltenen Befehle verwenden kann.


## Übung 3

```{python}
4 / 0.4
```

```{python}
4 // 0.4
```

```{python}
4 % 0.4
```

Es fällt auf, dass das Ergebnis der Ganzzahldivision `4 // 0.4` mathematisch nicht korrekt ist – es sollte 10 lauten, Python gibt aber 9 aus. Auch der Rest der Division sollte korrekt 0 sein, hier gibt Python 0.3999999999999998 aus (also fast 0.4).

Der Grund für dieses Verhalten liegt in der Tatsache begründet, dass Computer die meisten Kommazahlen nicht exakt repräsentieren können, sondern nur ungefähr. Daher können Rundungsfehler entstehen, deswegen sollte man bei Berechnungen mit Kommazahlen immer achtsam sein (normalerweise sind diese Rundungsfehler aber extrem klein und nicht so offensichtlich "falsch" wie in diesem Beispiel).


## Übung 4

```{python}
(11 + 27 + 15 + 10 + 33 + 18 + 25 + 22 + 39 + 11) / 10
```


## Übung 5

```{python}
import math

((5**5 - math.pi) * 19/3) / (math.sqrt(13) + 7**(2/3))
```


## Übung 6

Den Befehl `math.Sqrt(4)` gibt es nicht – da in Python Groß- und Kleinschreibung berücksichtigt wird, ist `math.Sqrt` nicht identisch mit `math.sqrt`. Letzteres ist die richtige Schreibweise der Wurzelfunktion, welche im `math`-Modul enthalten ist.

Korrekt wäre also:

```{python}
math.sqrt(4)
```
