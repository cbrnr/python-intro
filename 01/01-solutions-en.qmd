---
title: "1 – Solutions"
subtitle: "Introduction to Python and PsychoPy"
author: "Clemens Brunner"
date: 2024-10-03
format:
  html:
    page-layout: full
engine: jupyter
highlight-style: github
title-block-banner: true
theme:
  light: flatly
  dark: darkly
---

## Exercise 1

The installed Python version can be seen directly after starting the interactive Python interpreter. The latest version can be downloaded from the [official website](https://www.python.org/).


## Exercise 2

`import antigravity` opens a web browser with the [xkcd comic about Python](https://xkcd.com/353/).

`import this` prints the Zen of Python to the screen:

> | *The Zen of Python, by Tim Peters*
> |
> | Beautiful is better than ugly.
> | Explicit is better than implicit.
> | Simple is better than complex.
> | Complex is better than complicated.
> | Flat is better than nested.
> | Sparse is better than dense.
> | Readability counts.
> | Special cases aren't special enough to break the rules.
> | Although practicality beats purity.
> | Errors should never pass silently.
> | Unless explicitly silenced.
> | In the face of ambiguity, refuse the temptation to guess.
> | There should be one -- and preferably only one -- obvious way to do it.
> | Although that way may not be obvious at first unless you're Dutch.
> | Now is better than never.
> | Although never is often better than \textbf{right} now.
> | If the implementation is hard to explain, it's a bad idea.
> | If the implementation is easy to explain, it may be a good idea.
> | Namespaces are one honking great idea -- let's do more of those!

The command `import math` allows us to use commands contained in the `math` module.


## Exercise 3

```{python}
import math

4 * math.pi * 6371**2
```


## Exercise 4

```{python}
(11 + 27 + 15 + 10 + 33 + 18 + 25 + 22 + 39 + 11) / 10
```

```{python}
(11 * 27 * 15 * 10 * 33 * 18 * 25 * 22 * 39 * 11)**(1/10)
```


## Exercise 5

```{python}
import math

((5**5 - math.pi) * 19/3) / (math.sqrt(13) + 7**(2/3))
```


## Exercise 6

The command `math.Sqrt(4)` does not exist – since Python is case-sensitive, `math.Sqrt` is not identical to `math.sqrt`. The latter is the correct spelling of the square root function, which is contained in the `math` module.

So the correct command is:

```{python}
math.sqrt(4)
```
