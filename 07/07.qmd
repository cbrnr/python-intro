---
title: "7 â€“ Lists and Dictionaries"
subtitle: "Introduction to Python and PsychoPy"
author: "Clemens Brunner"
date: 2025-04-28
format:
  html:
    page-layout: full
engine: jupyter
highlight-style: github
title-block-banner: true
theme:
  light: flatly
  dark: darkly
---

## Creating lists

A list (`list`) is a sequence data type like a string (`str`). Unlike a string, a list can contain elements of *different* and *arbitrary* data types, e.g., strings, numbers, other lists, and so on. We can create a list with square brackets, inside which the individual elements are separated by commas:

```{python}
x = [23, "Hello", "test", 1.44, True]
```

```{python}
y = [1, "1", [1, 2, 3], ["test", False, [True, True, 2, 4]]]
```


## Indexing and slicing

Accessing individual single or multiple elements works just like with strings by indexing (or slicing) with square brackets. The first element has index `0`, the second element has index `1`, and so on. Negative indices count from the end of the list.

```{python}
x[0]  # first element
```

```{python}
x[-2]  # second to last element
```

```{python}
x[1:4]  # three elements
```

```{python}
x[::-1]  # reverse list
```


## Working with lists

### Length

Like with strings, the `len` function returns the length of the list (i.e., the number of elements in the list). Let's look at the two lists `x` and `y` defined previously:

```{python}
x
```

```{python}
y
```

These contain 5 and 4 elements, respectively:

```{python}
len(x)
```

```{python}
len(y)
```

The third and fourth elements in the list `y` are lists themselves:

```{python}
y[2]
```

```{python}
y[3]
```

The latter contains another list at the end (with index `2`):

```{python}
y[3][2]
```

An empty list is a perfectly normal list, it just doesn't contain any elements (i.e., it has a length of 0):

```{python}
z = []
len(z)
```

```{python}
type(z)
```


### Mutating lists

Since lists are *mutable*, we can modify individual elements after creating the list.

```{python}
x
```

```{python}
x[1] = 111111
x
```

```{python}
x[0] = None
x
```


### Operators `+` and `* `

We can concatenate two or more lists with the `+` operator; this creates a new list:

```{python}
[1, 2, "three"] + ["four", 5, 6.0]
```

The `*` operator replicates a list:

```{python}
[1, 2.0, "three"] * 3
```


### Appending list elements

The `append` method adds new elements to the end of the list.

```{python}
x
```

```{python}
x.append(13)
x
```

In contrast to strings, the list is mutated *in-place* here, meaning that the list is modified directly. (Re)assigning to a name does not work, as shown in the following example:

```{python}
a = x.append(25)
```

```{python}
print(a)  # list methods return None, because they mutate the list in-place
```

```{python}
x  # mutated list
```

:::{.callout-important}
List methods *mutate* the list *in-place* and do *not* return anything (`None`). In contrast, string methods cannot change the string and therefore always *return* a new string.
:::

If we want to add multiple elements at once, we can use the `extend` method:

```{python}
x.extend([99, "HH", "zz"])
x
```

:::{.callout-tip}
Try to explain the difference between `append` and `extend` using the following two statements:

```python
x.extend([99, "HH", "zz"])
x.append([99, "HH", "zz"])
```
:::


### Removing list elements

To remove specific elements from the list, use the `del` command.

```{python}
x = ["A", "b", 3, 4, "five"]
del x[1]  # removes the second element
x
```

:::{.callout-note}
Note that `del` is a Python keyword and not a function. Therefore, `del x[1]` is not a function call, and parentheses as a call operator are not necessary!
:::

Alternatively, we can use the `pop` method to remove an element at a specific index. This method also returns the removed element (which `del` does not).

```{python}
x = ["A", "b", 3, 4, "five"]
x.pop(1)
```

```{python}
x
```

The `remove` method removes the first element from the list that matches the specified value. Here, we do not specify the index to remove but the value to delete.

```{python}
x = ["A", "b", 31, 41, "five"]
x.remove(31)
x
```


### Sorting lists

If a list contains sortable elements (e.g., only numbers), we can sort it with the `sort` method.

```{python}
h = [6, 9, 23, 1, -78, 44]
h.sort()
h
```

:::{.callout-tip}
What happens if you try to sort a list with unsortable elements (e.g., the list `x` from the previous example)?
:::


### Reversing lists

We can reverse a list (just like a string) with the following slice (this creates a new list since the original list does not change):

```{python}
h[::-1]
```

```{python}
h
```

Another possibility is to reverse the list in-place with the `reverse` method:

```{python}
h.reverse()
h
```


### Iterating over lists

The `in` operator checks if a specific element is contained in a list.

```{python}
2 in h
```

```{python}
-78 in h
```

Just like any sequence data type, a list is iterable, meaning we can iterate over the individual elements with a loop:

```{python}
for k in [2, "five", 3.14, "seven"]:
    print(k)
```

The loop variable `k` takes on the individual values of the list in each iteration.


## Tuple

Tuples behave like lists but are *immutable*. This means that we cannot modify the elements contained in the tuple. Tuples are created like lists, but without square brackets (we also do not need parentheses, although these are sometimes syntactically necessary in combination with other commands, e.g., when passing a tuple as an argument).

```{python}
t = "A", "b", 3, 4, "five"
t
```

```{python}
t[1]
```

```{python}
#| error: true
t[1] = "c"  # error!
```

:::{.callout-tip}
A tuple with a single element is created with a trailing comma:

```{python}
t = "A",
t
```

Parentheses are optional, as mentioned earlier:

```{python}
t = ("A",)
t
```

Therefore, omitting the comma does *not* create a tuple but a string:

```{python}
t = ("A")
t
```
:::


## List comprehensions

List comprehensions are an alternative way to create lists. List comprehensions are essentially loops, but are syntactically much more compact (shorter). They are often used to create lists based on existing lists. Let's take a list of square numbers from 0 to 9 as an example. With a regular loop, we would create this list as follows:

```{python}
squares = []  # start with an empty list
for x in range(10):
    squares.append(x**2)  # add the square of each number to the list

squares
```

:::{.callout-note}
Starting with an empty list and then adding the individual elements to the list with a loop is a common pattern for creating many lists.
:::

The same result can be achieved much more concisely with a list comprehension:

```{python}
squares = [x**2 for x in range(10)]
squares
```

The ingredients of a list comprehension are:

- Two enclosing square brackets (which define a list)
- An expression (`x**2` in the example)
- A `for` statement (`for x in range(10)` in the example)
- Optionally an `if` condition
- Optionally additional `for` statements

A relatively complex example could look as follows:

```{python}
z = [(x - 1, y - 2) for x in [1, 2, 3] for y in [3, 1, 4] if x != y]
z
```

This list comprehension corresponds exactly to the following construct:

```{python}
z = []
for x in [1, 2, 3]:
    for y in [3, 1, 4]:
        if x != y:
            z.append((x - 1, y - 2))

z
```

::: {.callout-tip}
To be clear, list comprehensions are *not* a new feature in Python but just a more concise way to create a list. They are often used for relatively simple lists, because they are more readable and shorter than the corresponding loop. However, if the list comprehension becomes too complex, it is better to use a regular loop for better readability.
:::

The following additional examples illustrate that list comprehensions can apply an operation to all elements of a list or filter out specific elements:

```{python}
vec = [-4, -2, 0, 2, 4]
```

```{python}
[x * 2 for x in vec]  # new list with all elements doubled
```

```{python}
[x for x in vec if x >= 0]  # filter out all negative elements
```

```{python}
[abs(x) for x in vec]  # apply a function to all elements
```

:::{.callout-note}
In Python, it is not straightforward to perform element-wise calculations with lists. For example, multiplying a list by a number does not multiply each element by this number:

```{python}
x = [4, -3, 7, 81, 11]
x * 2
```

Instead, the list is "duplicated." Whenever you want to apply an operation element-wise, you must use a list comprehension (or the corresponding loop).

This is impractical for numerical applications. In one of the following sessions, we will learn how to use Python for numerical calculations (utilizing a new data type called NumPy array, provided by the [NumPy](https://numpy.org/) third-party package).
:::


## Dictionaries

The dictionary data type is a so-called mapping data type. It works similar to a language dictionary. For example, if we want to know the translation of a specific word, we look it up under the word (called a key) and find the translation there (called a value). In Python, we define a `dict` with curly braces and separate the entries with commas. Each entry consists of a key and a value, separated by a colon.

The following example shows a `dict` with three entries:

```{python}
d = {"Haus": "house", "Schlange": "snake", "Katze": "cat"}
```

Alternatively, we can also use the `dict` function, using keyword arguments to initialize the dictionary:

```{python}
d = dict(Haus="house", Schlange="snake", Katze="cat")
```

:::{.callout-note}
Note that the keyword arguments correspond to the dict keys and must be written without quotation marks. These are then converted to strings and used as keys in the dictionary.
:::

We can access individual elements with indexing, but instead of a numerical index (as with lists), we specify the respective key as an index:

```{python}
d["Haus"]
```

```{python}
d["Schlange"]
```

:::{.callout-important}
An essential difference to lists is that dictionaries are *unordered*. Therefore, we cannot access elements by numerical indices (as with lists), but only by keys! Note that keys can of course be numbers, but they still do not represent any order in a dictionary.
:::

Just like in lists, we can store elements with different data types in dictionaries. However, *keys* must be *immutable* (hence, we cannot use lists as keys). We can add new elements to an existing dictionary by specifying a key and a value:

```{python}
d
```

```{python}
d[23] = "tt"  # key 23, value "tt"
d[1] = 3.14  # key 1, value 3.14
d["L"] = [1, 2, 3]  # key "L", value [1, 2, 3]
d
```

Accessing a value through a key that does not exist in the dictionary results in an error message.

```{python}
#| error: true
d[0]  # error, key 0 does not exist
```


### Working with dictionaries

The length of a dictionary (i.e., the number of entries) is determined with the `len` function:

```{python}
len(d)
```

We can obtain the keys with the `keys` method and the values with the `values` method (both are essentially lists):

```{python}
d.keys()
```

```{python}
d.values()
```

If we want to know if a *key* exists, we can use the `in` operator:

```{python}
"Katze" in d
```

```{python}
"cat" in d
```

If we want to know if a *value* exists, we can use the `values` method:

```{python}
"cat" in d.values()
```

Of course, we can also iterate over a dictionary â€“ in this case, we iterate over the keys:

```{python}
for k in d:
    print(k)
```

To access the corresponding values, we index them:

```{python}
for k in d:
    print(k, ":", d[k])
```

A more elegant way is to use the `items` method. This creates a list of tuples containing the key/value pairs:

```python
d.items()
```

With key/value pairs, we can access both the keys and the values in a loop:

```{python}
for k, v in d.items():
    print(k, ":", v)
```

The previous example contains an interesting pattern, namely the simultaneous assignment of values to the names `k` and `v`, which is called *unpacking* in Python. Since iterating over `d.items()` generates a tuple consisting of two elements (the current key and the current value), we can assign these two values directly to two names `k` and `v` in each iteration.

:::{.callout-tip}
Here's another example of unpacking: swapping two values. First, we can assign two (or more) names simultaneously using tuple unpacking:

```{python}
a, b = 15, 23
```

```{python}
a
```

```{python}
b
```

Since Python always evaluates the right-hand side of an assignment first, we can also swap two values with this pattern:

```{python}
a, b = b, a
```

```{python}
a
```

```{python}
b
```
:::

If we want to avoid the error when accessing a non-existent key, we can use the `get` method instead. This method has two parameters: a key and a default value that is returned if the specified key does not exist in the dictionary:

```{python}
d
```

```{python}
#| error: true
d["psy"]  # error, key "psy" does not exist
```

```{python}
d.get("psy", 0)  # key "psy" does not exist, so return 0
```

```{python}
d.get("Schlange", "Tier")  # key "Schlange" exists
```

```{python}
d.get("snake", "Schlange")  # key "snake" does not exist
```

:::{.callout-tip}
If you do not specify a default value, `get` returns `None` if the key does not exist:

```{python}
d.get("psy")
```
:::

Note that in cases where default values are returned, these entries are not automatically added to the dictionary:

```{python}
d
```

If you want to add these new entries to the dictionary, you can use the `setdefault` method:

```{python}
d.setdefault("X", 42)  # key "X" does not exist
```

```{python}
d  # now key "X" exists
```

```{python}
d.setdefault("X", 100)  # key "X" already exists
```

```{python}
d
```


## Exercises

### Exercise 1

Write a function `histogram` that takes a list of numbers and displays a simplified histogram on the screen. This histogram should output one line for each value with the corresponding number of characters. The default character should be an asterisk (`*`), but this character should be customizable with a parameter called `char`. Examples of possible function calls and their results are:

```
>>> histogram([1, 8, 5, 17, 14, 9, 2])
*
********
*****
*****************
**************
*********
**
```

```
>>> histogram([1, 8, 5, 17, 2], char="-")
-
--------
-----
-----------------
--
```

:::{.callout-note}
This function does *not* return a value, but displays the histogram (using the `print` function) on the screen.
:::


### Exercise 2

Write a function `sum_of_squares` that takes a list of numbers as a parameter and returns the sum of the squares of these numbers (i.e., a single number).

:::{.callout-note}
The function could first create a list with the squared numbers, add their elements with the `sum` function, and then return the result.
:::


### Exercise 3

Create a list of integers from 1 to 25 and assign the name `numbers` to it. Then create five new lists containing the following numbers (based on `numbers`, the new lists should be named as indicated):

- The square numbers `squares`.
- The even numbers `evens`.
- The odd numbers `odds`.
- The square roots `roots`.
- The natural logarithms `logs`.

Use a suitable list comprehension to create each of the new lists.

:::{.callout-note}
For the last two lists, use suitable functions from the `math` module.
:::


### Exercise 4

Rewrite the following list comprehension using two nested `for` loops:

```Python
z = [x**2 - y for x in range(7) for y in [3, 1, 5] if x != y]
```


### Exercise 5

Create a dictionary `a` with three entries containing translations of the words "eins," "zwei," and "drei" into English. How can you display the translation of "zwei"?


### Exercise 6

Add a new entry ("vier" â€“ "four") to the dictionary `a` from the previous exercise and display the entire dictionary on the screen.


### Exercise 7

What happens if you try to access the non-existent key `"zehn"` in the dictionary `a`? What are two alternatives to return a default value (e.g., `"undefined"`) for non-existent keys (and thus avoid the error message)? What is the difference between these two possibilities? List three ways to access the element `"zehn"`!


### Exercise 8

In the previous session, we defined a function called `find` that behaves like the string method `str.find`. However, this function (and the method) only finds the *first* occurrence of the searched character, e.g., `"Werkstatttreppe".find("t")` returns `5` (the position of the first `t`). It would be useful if the indices of *all* found characters were returned in a list, e.g., `[5, 7, 8, 9]`. If the character does not occur at all, an empty list should be returned. Define a function `find` that behaves accordingly!
