---
title: "4 – Lösungen"
subtitle: "Einführung in Python und PsychoPy"
author: "Clemens Brunner"
date: 2023-11-09
format:
  html:
    page-layout: full
engine: jupyter
highlight-style: github
title-block-banner: true
theme:
  light: flatly
  dark: darkly
lang: de
author-title: "Autor"
published-title: "Veröffentlicht"
---

## Übung 1

Die Funktion `print` gibt Werte am Bildschirm aus:

```python
help(print)
```

```{python}
print("Hello World!")  # kein Rückgabewert (None)
```

Die Funktion `str` erstellt ein String-Objekt:

```python
help(str)
```

```{python}
str(59)  # Rückgabewert '59' (str)
```

Die Funktion `int` erstellt ein Integer-Objekt:

```python
help(int)
```

```{python}
int("59")  # Rückgabewert 59 (int)
```

Die Funktion `max` gibt das Maximum der Argumente zurück:

```python
help(max)
```

```{python}
max(54, -12, 33, -100, -2)  # Rückgabewert -100 (int)
```

Die Funktion `sum` gibt die Summe einer Sequenz (z.B. Liste an Zahlen) zurück:

```python
help(sum)
```

```{python}
sum([1, 2, 3, 4])  # Rückgabewert 10 (int)
```


## Übung 2

```{python}
def mult(a, b):
    """Multiply a and b."""
    return a * b
```

```{python}
mult(1, 1)  # 1
```

```{python}
mult(2, 6)  # 12
```

```{python}
mult(-12, 36)  # -432
```


## Übung 3

```{python}
def to_fahrenheit(celsius):
    """Convert Celsius to Fahrenheit."""
    return celsius * 9/5 + 32
```

```{python}
def to_celsius(fahrenheit):
    """Convert Fahrenheit to Celsius."""
    return (fahrenheit - 32) * 5/9
```

```{python}
to_fahrenheit(0)
```

```{python}
to_fahrenheit(20)
```

```{python}
to_fahrenheit(38)
```

```{python}
to_fahrenheit(100)
```

```{python}
to_celsius(32)
```

```{python}
to_celsius(68)
```

```{python}
to_celsius(100.4)
```

```{python}
to_celsius(212)
```

```{python}
to_celsius(to_fahrenheit(0))
```

```{python}
to_celsius(to_fahrenheit(20))
```

```{python}
to_celsius(to_fahrenheit(38))
```

```{python}
to_celsius(to_fahrenheit(100))
```


## Übung 4

Funktionen

- strukturieren Programme,
- machen Code wiederverwendbar,
- verallgemeinern Code (durch Parameter) und
- verkürzen Programme (repetitiver Code wird nur einmal geschrieben und kann dann beliebig oft aufgerufen werden).

Eine Funktion muss *definiert* sein, bevor man sie benutzen (aufrufen) kann. Durch die Definition weiß Python, welcher Code dann beim Aufruf ausgeführt werden muss.

Erst beim *Aufrufen* der Funktion wird der Code im Funktionskörper tatsächlich ausgeführt. Für alle Parameter werden dann die tatsächlich übergebenen Werte (die Argumente) verwendet.

Eine Funktion kann bei der Definition Parameter haben. Beim Aufruf einer Funktion übergibt man dann für die Parameter tatsächliche Werte, welche man Argumente nennt.


## Übung 5

```{python}
def nonsense(a, b=10, c=13):
    return a**2 - b * 2 + c**2
```

```{python}
#| error: true
nonsense()  # TypeError, da a=undefiniert, b=10, c=13
```

```{python}
nonsense(22, 15, 78)  # 6538; a=22, b=15, c=78
```

```{python}
nonsense(11, 3)  # 284; a=11, b=3, c=13
```

```{python}
nonsense(a=42)  # 1913; a=42, b=10, c=13
```

```{python}
nonsense(a=17, c=88)  # 8013; a=17, b=10, c=88
```

```{python}
nonsense(3, 4, c=5)  # 26; a=3, b=4, c=5
```

```{python}
nonsense(3, c=2)  # -7; a=3, b=10, c=2
```
