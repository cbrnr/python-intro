---
title: "4 â€“ Solutions"
subtitle: "Introduction to Python and PsychoPy"
author: "Clemens Brunner"
date: 2024-10-24
format:
  html:
    page-layout: full
engine: jupyter
highlight-style: github
title-block-banner: true
theme:
  light: flatly
  dark: darkly
---

## Exercise 1

The `print` function prints values to the screen:

```python
help(print)
```

```{python}
print("Hello World!")  # no return value (None)
```

The `str` function creates a string object:

```python
help(str)
```

```{python}
str(59)  # returns '59' (str)
```

The `int` function creates an integer object:

```python
help(int)
```

```{python}
int("59")  # returns 59 (int)
```

The `max` function returns the maximum of the arguments:

```python
help(max)
```

```{python}
max(54, -12, 33, -100, -2)  # returns -100 (int)
```

The `sum` function returns the sum of a sequence (e.g., list of numbers):

```python
help(sum)
```

```{python}
sum([1, 2, 3, 4])  # returns 10 (int)
```


## Exercise 2

```{python}
def mult(a, b):
    """Multiply a and b."""
    return a * b
```

```{python}
mult(1, 1)  # 1
```

```{python}
mult(2, 6)  # 12
```

```{python}
mult(-12, 36)  # -432
```


## Exercise 3

```{python}
def to_fahrenheit(celsius):
    """Convert Celsius to Fahrenheit."""
    return celsius * 9/5 + 32
```

```{python}
def to_celsius(fahrenheit):
    """Convert Fahrenheit to Celsius."""
    return (fahrenheit - 32) * 5/9
```

```{python}
to_fahrenheit(0)
```

```{python}
to_fahrenheit(20)
```

```{python}
to_fahrenheit(38)
```

```{python}
to_fahrenheit(100)
```

```{python}
to_celsius(32)
```

```{python}
to_celsius(68)
```

```{python}
to_celsius(100.4)
```

```{python}
to_celsius(212)
```

```{python}
to_celsius(to_fahrenheit(0))
```

```{python}
to_celsius(to_fahrenheit(20))
```

```{python}
to_celsius(to_fahrenheit(38))
```

```{python}
to_celsius(to_fahrenheit(100))
```


## Exercise 4

Functions

- structure programs,
- make code reusable,
- generalize code (through parameters), and
- shorten programs (repetitive code is written only once and can then be called as often as needed).

A function must be *defined* before it can be used (called). Through the definition, Python knows which code must be executed when the function is called.

Only when the function is *called* is the code in the function body actually executed. For all parameters, the actual values passed (the arguments) are then used.

A function can have parameters when defined. When calling the function, you pass actual values for these parameters, known as arguments.


## Exercise 5

```{python}
def nonsense(a, b=10, c=13):
    return a**2 - b * 2 + c**2
```

```{python}
#| error: true
nonsense()  # TypeError, because a=?, b=10, c=13
```

```{python}
nonsense(22, 15, 78)  # 6538; a=22, b=15, c=78
```

```{python}
nonsense(11, 3)  # 284; a=11, b=3, c=13
```

```{python}
nonsense(a=42)  # 1913; a=42, b=10, c=13
```

```{python}
nonsense(a=17, c=88)  # 8013; a=17, b=10, c=88
```

```{python}
nonsense(3, 4, c=5)  # 26; a=3, b=4, c=5
```

```{python}
nonsense(3, c=2)  # -7; a=3, b=10, c=2
```
