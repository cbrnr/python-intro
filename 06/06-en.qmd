---
title: "6 – Strings"
subtitle: "Introduction to Python and PsychoPy"
author: "Clemens Brunner"
date: 2024-11-07
format:
  html:
    page-layout: full
engine: jupyter
highlight-style: github
title-block-banner: true
theme:
  light: flatly
  dark: darkly
---

## Recap

We can roughly categorize data types in Python as follows:

- Logical data type (`bool`)
- Numeric data types (`int`, `float`)
- Sequences (can consist of multiple elements) (`str`, `list`, `tuple`)
- Mappings (key-value pairs) (`dict`)

The `type` function determines the type of a given object. Logical and numeric data types are relatively simple, and we have already seen how to use them. In this and the following session, we will introduce more complex types that are frequently used in Python: the sequence data types `str`, `list`, and `tuple`, as well as the mapping data type `dict`.

Before we discuss these types in detail, let's look at an important fundamental property of data types in Python.


## Mutable and immutable

Python distinguishes between two kinds of data types:

- Mutable
- Immutable

Objects of a *mutable* type can be modified after they have been created. In contrast, objects of an *immutable* type cannot be modified after they have been created.

We will only discuss the following two *mutable* types in this course:

- List (`list`)
- Dictionary (`dict`)

In addition, we will also discuss the following *immutable* types:

- Integer number (`int`), decimal number (`float`)
- String (`str`), tuple (`tuple`)


### Immutable types

Let's start with immutable types. As an example, consider the object `2` of type `int`. This object is immutable. In the following example, the object `2` (named `a`) is not actually changed. When you set `a = 3`, you are only changing the name `a` – it then refers to the object `3` (a different object, think of the name tag analogy).

We can verify that the objects are different with the `id` function (the IDs are indeed different).

```{python}
a = 2
```

```{python}
id(a)
```

```{python}
a = 3
```

```{python}
id(a)
```

Strings are also immutable. If you try to modify a string after it has been created (e.g., change a character), you will get an error:

```{python}
s = "Python"
```

```{python}
s[1]  # second character (Python indexing is zero-based)
```

```{python}
#| error: true
s[1] = "x"  # does not work as strings are immutable
```

Similar to strings, tuples are also immutable. A tuple is a collection (sequence) of different objects, similar to a list:

```{python}
t = 1, 2, 18.33, "Python", 44
```

```{python}
t[0]  # first element of the tuple
```

```{python}
t[3]  # fourth element of the tuple
```

```{python}
#| error: true
t[0] = "X"  # does not work as tuples are immutable
```


### Mutable types

In contrast to the examples above, objects of a mutable type can be modified after they have been created. A list is a collection of different objects, similar to a tuple. However, a list can be modified after it has been created:

```{python}
k = [1, 2, 18.33, "Python", 44]  # list
```

```{python}
k
```

```{python}
k[0]  # first element
```

```{python}
k[3]  # fourth element
```

```{python}
k[0] = "X"  # this works!
```

```{python}
k
```

:::{.callout-note}
We create a list by enclosing the comma-separated elements in square brackets `[` and `]`.
:::

Dictionary objects are also mutable:

```{python}
d = {"a": 12, "b": 3.14, 5: "Python", "c": "yes"}
```

```{python}
d
```

```{python}
d["a"]
```

```{python}
d["a"] = "CHANGED"  # this works!
```

```{python}
d
```

More details on the `list`, `tuple`, and `dict` data types will follow in the next session. We will now focus on the immutable string data type.


## Strings

### Creating strings

The `str` data type is a sequence data type representing character strings. Therefore, a string consists of a sequence of characters (letters, numbers, symbols, and other special characters). Strings are enclosed in single or double quotes (but the content of a string itself consists only of the characters *between* these quotes).

```{python}
s1 = "String"
s1
```

```{python}
s2 = 'This is also a string.'
s2
```

```{python}
s3 = 'This is a string with "double quotes".'
s3
```

```{python}
s4 = "And that's a string too!"
s4
```

Multi-line strings, which can span multiple lines, must be enclosed in three quotes (line breaks are then possible and part of the string).

```{python}
s5 = """This is a long test.
It can span
multiple lines.
"""
```

```{python}
print(s5)  # prints the formatted string
```

```{python}
s5  # actual string value, \n represents a line break
```

We have already encountered triple-quoted strings as docstrings for short function descriptions.

:::{.callout-tip}
If you want to create a string that contains both double quotes and single quotes, you cannot use the same type of quotation mark for both the string definition and the characters within the string. Instead, you need to use a backslash (`\`) before the quotation mark that matches the one used to define the string. This is known as an [escape sequence](https://en.wikipedia.org/wiki/Escape_sequence)):

```{python}
x = "This string contains both 'single' and \"double\" quotes."
y = 'This string contains both \'single\' and "double" quotes.'
```

The values of the two strings `x` and `y` are identical, which shows that it does not matter whether you use single or double quotes for the string definition:

```{python}
x == y
```

The `print` function displays escape sequences in a "correct" format (i.e., it shows the actual characters represented by the escape sequences):

```{python}
print(x)
```

Non-printable characters can also be represented with escape sequences, such as a line break `\n` or a tabulator `\t`. A backslash `\` itself must also be written as an escape sequence `\\`.
:::


### String indexing

Sequence data types support indexing, which allows us to access individual elements. The index (i.e., the position of the desired character) is specified in square brackets after the object.

:::{.callout-important}
Python uses zero-based indexing, i.e., the first element has index 0. You can interpret the index as the difference/distance to the first element.
:::

```{python}
s = "String"
s
```

```{python}
s[0]  # first character
```

```{python}
s[1]  # second character
```

Negative indices access elements from the end to the beginning, i.e., −1 is the last element, −2 is the second-to-last element, and so on.

```{python}
s[-1]  # last character
```

```{python}
s[-2]  # second-to-last character
```


### String slicing

In addition to indexing, Python also supports slicing, which allows us to extract a range of elements (not just one) from a sequence. We specify the start index and the stop index in square brackets, separated by a colon.

:::{.callout-important}
The start index is inclusive, and the stop index is exclusive. The stop index does *not* belong to the range!
:::

Accessing multiple elements like this (using the colon) produces a *slice* of the original sequence.

:::{.callout-note}
Omitting the start index counts from the first element (inclusive). Omitting the stop index counts up to the last element (inclusive).
:::

```{python}
s
```

```{python}
s[0:4]  # 4 elements, index 0, 1, 2, 3, identical to s[:4]
```

```{python}
s[4:6]  # 2 elements, index 4, 5
```

```{python}
s[:3]  # 3 elements, index 0, 1, 2
```

```{python}
s[2:]  # from index 2 to the end (inclusive)
```

```{python}
s[2:-1]  # from index 2 to the last element (exclusive)
```

```{python}
s[1:-3]  # from index 1 to the third-to-last element (exclusive)
```

:::{.callout-tip}
The fact that the start index is always inclusive and the stop index is always exclusive has the advantage that the difference between the two indices reflects the number of elements in the slice. For example, the slice `s[73:81]` contains exactly $81 - 73 = 8$ elements.
:::

Adjacent slices can be created intuitively, e.g.:

```{python}
s[:2]  # first two characters
```

```{python}
s[2:]  # remaining characters (starting from the third character)
```

Optionally, we can specify the step size after the stop index (the default step size is 1). For example, we can extract every second element starting at index 1 and stopping at index 5 (exclusive):

```{python}
s[1:5:2]  # [start:stop:step]
```

This way, we can extract every second character of a string as follows:

```{python}
s[::2]
```

To reverse the order of characters, we specify a negative step size:

```{python}
s[4:1:-1]
```

```{python}
s[-1:-4:-1]
```

```{python}
s[::-1]  # reverse entire string
```

You can think of the indices as boundaries *between* the string elements:

![](slicing.png)


### Working with strings

The `len` function returns the length (i.e., the number of elements) of a sequence (for strings, the number of elements corresponds to the number of characters).

```{python}
s
```

```{python}
len(s)
```

```{python}
len("This is a relatively long string.")
```

A string of length 0 is still a valid string – it just contains no characters:

```{python}
s = ""
```

```{python}
s
```

```{python}
len(s)
```

```{python}
type(s)
```

Strings are immutable, i.e., they cannot be changed after they have been created. Instead, you always have to create a new string:

```{python}
s = "house"
```

```{python}
s[0]
```

```{python}
#| error: true
s[0] = "m"  # does not work
```

```{python}
"m" + s[1:]  # create new string
```

The previous example also shows that you can concatenate strings with the `+` operator:

```{python}
x = "a" + "b" + "c"
x
```

Therefore, you can duplicate a string with the `*` operator:

```{python}
"Hello" * 4
```


### String methods

Python provides many useful specific functions for strings. These are applied directly to a string object as follows:

```{python}
x.upper()
```

The general syntax is as follows: first, we specify the string object (in the example `x`), followed by a dot, followed by the name of the function (in the example `upper`) that you want to call. Such a function is also called a *method*, as it is applied directly to a previously specified object. In the example, the `upper` method creates a new string, consisting of the characters of the string `x` in uppercase.

This notation has the advantage that it is immediately clear that the method *belongs* to the object; in principle, however, the call corresponds to a classic function call `str.upper(x)`.

```{python}
"abcdefg".upper()  # uppercase
```

```{python}
"dsKJsdJKJKK".lower()  # lowercase
```

Importantly, all string methods *return* a *new* string. Since strings are immutable, they cannot be changed by the methods! This means that you should assign a name to the return value if you want to use the result, for example:

```{python}
x
```

```{python}
x = x.upper()  # assign name x to result of upper method
```

```{python}
x
```

:::{.callout-tip}
In the interactive interpreter, you can easily find out which methods you can apply to an object. To do this, type the name of an object, followed by a dot, and then press the <kbd>tab</kbd> key, which will list all available methods.

For example, if you have a string `x`, you can type:

```
x = "Test String"
x.<TAB>
```

Alternatively, you can use the `dir` function to list all possible methods of an object, for example:

```python
dir(x)
```
:::

We are now going to discuss some useful string methods.

The `strip` method removes leading and trailing whitespace from a string:

```{python}
"      Sentence with whitespace.         ".strip()
```

The `split` method splits a string into a list of strings. The optional argument specifies the character at which to split (by default, whitespace, i.e., spaces and tabs, is used).

```{python}
"Some sentences. Separated by periods. Why?".split(".")
```

```{python}
"Some sentences. Separated by periods. Why?".split()
```

The opposite of `split` is `join`, which concatenates strings in a list into a single string. The specified string is used as the joining character.

```{python}
";".join(["das", "ist", "ein", "Test"])
```

We will discuss lists in the next session, but for now, remember that the ability to concatenate strings in a list with `join` into a single string is more efficient than concatenating individual strings with `+`.

The `count` method counts how often a specified character occurs in the string:

```{python}
s = "This is a short string, just for testing."
s.count("i")
```

```{python}
s.count("e")
```

The `find` method returns the index in the string where the specified character first occurs:

```{python}
s.find("s")
```

Optionally, you can also specify a starting index:

```{python}
s.find("s", 4)
```

The `in` operator can be used to check if a specific character is contained in a string:

```{python}
"y" in s
```

```{python}
"i" in s
```


### Iterating over strings

A string is iterable, i.e., you can iterate over the individual elements with a `for` loop:

```{python}
s = "Computer"

for c in s:
    print(c)
```

Alternatively, you could also use the following `for` loop, which is common in many other programming languages:

```{python}
s = "Computer"

for i in range(len(s)):  # not recommended!
    print(s[i])
```

However, using `range` is less readable than directly iterating over the string, so you should always prefer the direct variant!

We could also use a `while` loop to iterate over the string, but this is less common and less readable (remember that we usually use `while` loops when we do not know the number of iterations in advance):

```{python}
s = "Computer"
i = 0

while i < len(s):
    print(s[i])
    i += 1
```

Let's look at a slightly more complex example. We want to find out at which position the character "p" is located in the string "Computer". Of course, we could (and should) use the `find` method:

```{python}
s = "Computer"
c = "p"  # character to find
s.find(c)
```

However, we can implement a function that performs the same task for educational purposes. In general, we use a loop to iterate over each character. If the current character `s[i]` at position `i` is equal to the character `c` we are looking for, we break out of the loop, and the variable `i` contains the index of the character:

```{python}
i = 0
while i < len(s):
    if s[i] == c:
        break
    i += 1

i
```


## Exercises

### Exercise 1

Write a function `reverse` that returns a string in reverse order.


### Exercise 2

Given the following string:

```python
s = "educational neuroscience"
```

Is there a method that takes a given string and creates a new string in which all *words* (not letters!) start with a capital letter? If so, apply this method to `s`!


### Exercise 3

Given the following string:

```python
s = "Edukational Neuroscience"
```

The character `k` at index 3 should be replaced by a `c`. How can you create a new string from (parts of) `s` in which this replacement has been made?

:::{.callout-note}
Use slices to access the parts of `s` before and after `k`.
:::


### Exercise 4

Palindromes are words or sentences that read the same forwards and backwards, e.g., Anna, radar, and racecar. Palindromes can even consist of multiple words or entire sentences, such as "Dr. Awkward" or "Was it a cat I saw?" (but only if you ignore case, spaces, and punctuation).

Write a function `is_palindrome` that takes a string and returns `True` if the string is a palindrome or `False` otherwise.

:::{.callout-note}
First convert the string to lowercase, as otherwise e.g. Anna will not be recognized as a palindrome (since an A is not equal to an a). Your function does not have to work with sentences, but only with individual words! If you want it to work with sentences though, you have to ignore all spaces and punctuation, which you can achieve with the `replace` method.
:::


### Exercise 5

The string method `find` is used to search for a string or character in a given string. The following example demonstrates how to find the first occurrence of the character `t` in the string `s`:

```python
s = "Educational Neuroscience"
s.find("t")
```

The method return the index of the first occurrence of the search character. In this example, it returns 5. If the search string is not found at all, it returns −1.

Define a function `find(s, sub)` that replicates this functionality (without using the `find` method or other string methods). Your function should return the same result as in the example `s.find("t")`; the call to your function for this example looks like this:

```python
find(s, "t")
```

:::{.callout-note}
Use a loop to iterate over the individual characters of `s`. A variable that tracks the current position in `s` (starting at 0) is helpful in the function. The `len` function, which returns the length of a string, could also be helpful. Also note that `return` immediately exits the function and no further code in the function is executed, and that `return` can be present at any point in the function and can be present more than once.
:::


### Exercise 6

Write a function `count(word, letter)` that returns the number of occurrences of the character `letter` in the string `word`. Do not use any built-in string methods for your solution!

For example, the call `count("Possession", "s")` should return `4`, analogous to the built-in string method `"Possession".count("s")`.


:::{.callout-note}
Use a similar structure as in Exercise 5 (i.e., iterate over all characters of the string). A `for` loop is possibly more suitable here. Count how often the search character has occurred in a variable and return this value at the end.
:::


### Exercise 7

Create a string `path` with the following content:

```
C:\Program Files\Python\Python3.13\python.exe
```

Use the `print` function to display `path` on the screen.
