---
title: "6 â€“ Solutions"
subtitle: "Introduction to Python and PsychoPy"
author: "Clemens Brunner"
date: 2025-04-07
format:
  html:
    page-layout: full
engine: jupyter
highlight-style: github
title-block-banner: true
theme:
  light: flatly
  dark: darkly
---

## Exercise 1

```{python}
def reverse(s):
    return s[::-1]
```


## Exercise 2

```{python}
s = "educational neuroscience"
s.title()
```


## Exercise 3

```{python}
s = "Edukational Neuroscience"
s[:3] + "c" + s[4:]
```


## Exercise 4

```{python}
def is_palindrome(s):
    s = s.lower()
    s = s.replace("?", "").replace("!", "").replace(".", "").replace(",", "")
    s = s.replace(" ", "")
    return s == s[::-1]
```


## Exercise 5

We could use a `while` loop here, because we don't know in advance how many iterations will be needed until we find the character. We track the current position in the string `s` with the name `i`:

```{python}
def find(s, sub):
    i = 0
    while i < len(s):
        if s[i] == sub:
            return i
        i += 1  # increment i (could also be written as i = i + 1)
    return -1  # only returned if the character was not found
```

Here's an alternative solution using a `for` loop (the `enumerate` function returns both the position and the current character within the string `s):

```{python}
def find(s, sub):
    for i, char in enumerate(s):
        if char == sub:
            return i
    return -1  # only returned if the character was not found
```


## Exercise 6

```{python}
def count(word, letter):
    i = 0  # we have not found any occurrences yet
    for c in word:
        if c == letter:  # if we find the letter
            i += 1  # we increment the counter i by 1
    return i
```


## Exercise 7

```{python}
path = "C:\\Program Files\\Python\\Python3.13\\python.exe"
print(path)
```
