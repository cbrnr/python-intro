---
title: "9 â€“ Solutions"
subtitle: "Introduction to Python and PsychoPy"
author: "Clemens Brunner"
date: 2024-12-05
format:
  html:
    page-layout: full
engine: jupyter
highlight-style: github
title-block-banner: true
theme:
  light: flatly
  dark: darkly
---

## Exercise 1

```{python}
import numpy as np

t = np.arange(0, 10, 0.1)
t.size  # 100 elements
```

```{python}
t.shape  # (100,)
```


## Exercise 2

```{python}
s = t.reshape((20, -1))  # 20 rows, 5 columns
```


## Exercise 3

```{python}
from numpy.random import default_rng

rng = default_rng(seed=18)
u = rng.integers(low=-1000, high=1000, size=(100, 8))
u.sum()  # sum of all elements
```

```{python}
u.mean()  # mean of all elements
```

```{python}
u.mean(1)  # row means
```

```{python}
u.mean(0)  # column means
```

```{python}
u.max(0)  # column maxima
```

```{python}
u.min(0)  # column minima
```

```{python}
u.max(1)  # row maxima
```

```{python}
u.min(1)  # row minima
```

```{python}
u.mean(1).max()  # maximum of row means
```


## Exercise 4

```{python}
x = np.arange(1, 151).reshape(3, 10, 5)
x.mean(axis=(1, 2))
```


## Exercise 5

There are several solutions, here are three possibilities:


### Option 1

```{python}
chess = np.zeros((8, 8), dtype=int)
for row in range(0, 8):
    if row % 2 == 1:
        chess[row, ::2] = 1
    else:
        chess[row, 1::2] = 1
chess
```


### Option 2

```{python}
chess = np.tile(np.array([[0, 1], [1, 0]]), (4, 4))
chess
```


### Option 3

```{python}
chess = np.zeros((8, 8), dtype=int)
chess[::2, 1::2] = 1
chess[1::2, ::2] = 1
chess
```

As an additional exercise, you could try to write a function that generates a chessboard pattern of a certain size `size`, e.g.

```python
def generate_chess(size=8):
    ...
```
