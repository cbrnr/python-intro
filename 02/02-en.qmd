---
title: "2 – The Python Environment"
subtitle: "Introduction to Python and PsychoPy"
author: "Clemens Brunner"
date: 2024-10-10
format:
  html:
    page-layout: full
engine: jupyter
highlight-style: github
title-block-banner: true
theme:
  light: flatly
  dark: darkly
---

## The Python ecosystem

Python consists of the Python programming language, a Python interpreter (a program that interprets and runs Python code), and an extensive standard library. The reference (official) Python interpreter is written in the C programming language and is therefore called [CPython](https://github.com/python/cpython).

![](python_components.png)

The Python programming language includes only relatively few keywords and built-in functions. However, the [standard library](https://docs.python.org/3/library/) extends the core functionality with additional data types, input/output, regular expressions, mathematical functions, data compression, networking, multimedia services, graphical user interfaces, and much more. The standard library is part of any Python installation, so it is always available at your fingertips.

:::{.callout-tip}
In the previous chapter, we used `import math` to access mathematical functions and constants. Importing is necessary before we can use things contained in any module.
:::

Python can be further extended with third-party packages that are not part of the official Python distribution. Installing these packages is straightforward, because they are available from a central repository called the [Python Packaging Index (PyPI)](https://pypi.org). We will discuss how to install, update, and uninstall third-party packages later in this chapter.

As for any programming language, a code editor or integrated development environment (IDE) is an essential tool for writing Python code. Good code editors include support for syntax highlighting, indentation, line numbers, [linting](https://en.wikipedia.org/wiki/Lint_(software)), code inspection, and more. Here is a selection of popular editors (all of them are free, open source, and available on Windows, macOS, and Linux):

- [Visual Studio Code](https://code.visualstudio.com)
- [PyCharm](https://www.jetbrains.com/pycharm/)
- [Spyder](https://www.spyder-ide.org)

I recommend [Visual Studio Code](https://code.visualstudio.com) if you have never used Python before. However, feel free to try other programs such as [PyCharm](https://www.jetbrains.com/pycharm/), which also provides a great Python development experience.


## Visual Studio Code

This is what Visual Studio Code looks like when you first open it:

![](vscode.png)

There are two things you should do before you start writing Python code:

1. Click on the *Extensions* section in the left sidebar, search for "Python", and install the [Python extension](https://marketplace.visualstudio.com/items?itemName=ms-python.python).
2. I recommend that you follow the [PEP8](https://www.python.org/dev/peps/pep-0008/) coding style for Python code that you write. To automatically format your code in Visual Studio Code, install the [Ruff extension](https://marketplace.visualstudio.com/items?itemName=charliermarsh.ruff), which provides support for linting and code formatting according to PEP8 standards.

That's it, you are now ready to start working with Python. If you have never used Visual Studio Code before, you can check out the [Python in Visual Studio Code overview](https://code.visualstudio.com/docs/languages/python) before moving on to the next section.

:::{.callout-tip}
The command palette in Visual Studio Code can be opened with <kbd>Ctrl</kbd><kbd>Shift</kbd><kbd>P</kbd> (Windows/Linux) or <kbd>⌘</kbd><kbd>Shift</kbd><kbd>P</kbd> (macOS). Here, you can search for and execute commands. For example, you can format a Python script according to PEP8 using the "Ruff: Format document" command – give it a try!
:::

You can run a Python script (more on that later) in Visual Studio Code by clicking the "Play" button at the top right. This will open an integrated terminal, and the *entire* code will be executed in script mode.

If you want to run only individual lines of code in the interactive interpreter (also more on that later), it is best to use the keyboard shortcut <kbd>Shift</kbd><kbd>Enter</kbd>. This will execute either the current line (where the cursor is) or all selected lines in the interactive Python interpreter, which opens in an integrated terminal. Further details can be found in the [official documentation](https://code.visualstudio.com/docs/python/python-tutorial).


## Getting help

One of the most important activities when programming is reading documentation. Besides querying your favorite web search engine or GPT model, the Python interpreter can display short help texts for many Python commands. For example, to view the documentation for the `print` function, you can type `help(print)` in the Python interpreter.


## Managing packages

Almost any real-world project requires functionality that is not available in Python out of the box. Therefore, it is important to know how to install additional third-party packages. You might also want to uninstall packages that you don't need anymore to keep your environment clean and save some disk space. It is also a good idea to keep all installed packages up to date, as package maintainers regularly fix bugs and add new features.

All of these tasks can be performed with the `pip` command line tool, which is bundled with the Python installation. To use it, we need to open a terminal:

- On Windows, open the "Terminal" app from the start menu.
- On macOS, open the "Terminal" app.
- On Linux, open your favorite terminal app.

:::{.callout-note}
On macOS, the command line tool is called `pip3` instead of `pip` (just like we use `python3` instead of `python` to invoke the Python interpreter).
:::

:::{.callout-important}
A [terminal](https://en.wikipedia.org/wiki/Terminal_emulator) is a program that runs a [shell](https://en.wikipedia.org/wiki/Shell_(computing)), which interprets text commands to interact with the operating system.

Note that `pip` is *not* a Python command, so make sure to enter `pip` commands in the shell and not in the Python interpreter! Usually, the prompt is a good indicator of where to enter commands. As a rule of thumb, if the prompt ends with a `$` or `>`, you are in the shell. If the prompt ends with `>>>`, you are in the Python interpreter.
:::

Let's test if we can successfully run the `pip` tool. In a terminal, type:

```shell
pip --version
```

This command should display the `pip` version (for example, 23.3.1) and its location in the file system. If this results in an error message, something is wrong with your Python installation (in this case, consult the [installation instructions](https://docs.python.org/3/using/index.html) to fix the problem).

It is useful to know which Python packages are already installed. We can use the following command to find out:

```shell
pip list
```

This will print a list of installed packages, including their names and versions. If you have just installed Python, this list will only contain a few entries (usually just `pip`).

Before installing a new package, we need to know the name of the package. You can query the [PyPI website](https://pypi.org/) to find a specific package. You can then install that package as follows (replace `<package_name>` with the actual name):

```shell
pip install <package_name>
```

It is also straightforward to uninstall a package:

```shell
pip uninstall <package_name>
```

Finally, you can get a list of outdated packages:

```shell
pip list --outdated
```

If this command shows packages that have newer versions available, you can upgrade each individual package with:

```shell
pip install --upgrade <package_name>
```

:::{.callout-note}
As you get more proficient with Python, you might want to create a [virtual environment](https://docs.python.org/3/library/venv.html) for each project. This allows you to install packages for each project in separate isolated environments, which avoids conflicts between different projects. However, this is a slightly advanced topic and not necessary for this introductory course.
:::


## The Python interpreter

The Python interpreter can operate in two modes, namely in interactive or in script mode.


### Interactive mode (REPL)

The interactive mode is useful for executing single lines of code, because Python immediately shows the result. We have already encountered this mode before when we used Python as a calculator. To recap, interactive mode features a prompt (`>>>`), which indicates that Python is ready and waiting for user input. Importantly, Python also displays the results of calculations automatically in interactive mode. For example:

```{python}
1 + 4
```

The result `5` is displayed automatically right after the command. In general, if you start Python by typing `python` on the command line, Python will start in interactive mode.

:::{.callout-tip}
You can exit the interactive interpreter by typing `exit()` (or alternatively <kbd>Ctrl</kbd><kbd>D</kbd> on macOS or Linux).
:::


### Script mode

In contrast to interactive mode, Python can run many lines of code in one go using script mode. A Python script is a plain text file (ending in `.py`) containing Python code. In general, one line contains exactly one code statement. Compared to interactive mode, Python does *not* display results automatically. For example, let's assume that a Python script named `test.py` contains the following line:

```python
1 + 4
```

When we run this script with `python test.py` from the command line, Python executes all commands line by line, but it does not automatically show the results. Therefore, there will be no output when running this script. However, you can always explicitly print something on the screen with the `print` function (more on functions later), so in this example script we could write `print(1 + 4)` instead.


## Working directory

The Python interpreter always operates in exactly one directory, the so-called working directory. The working directory is important because Python assumes that your own files (such as data, scripts, or modules) are located in this directory (or relative to it).

When starting Python from the command line, it is advisable to first change to the desired directory and then start Python. The reason for this is that the working directory is the directory from which Python was launched.


## Syntax

Let's return to the Python programming language and in particular its syntax (which describes the rules and structure of code statements). One of the most unique features of Python is that it uses significant [whitespace](https://en.wikipedia.org/wiki/Whitespace_character) (in almost all cases this means spaces) for grouping code into blocks. This results in fewer lines of code and therefore less visual noise, because no special grouping symbols (such as `begin` or `end`) are needed.

Consider the following example code snippet (the line numbers are not part of the code):

```{.python code-line-numbers="true"}
# this is a comment
def do_something(n_times=10):
    counter = 0
    for i in range(n_times):
        print(i)
        if i % 2:  # odd number
            counter += 1
            print("Odd")
    return counter

counter = do_something()
print(counter)
```

It is not important to understand what this code is doing at this point, so let's focus on its structure.

First, we notice that line 1 starts with a `#` character. This line is a *comment*, and Python ignores everything from the `#` character to the end of the line. This means that we can use comments to explain portions of the code in plain English (or whatever natural language you like to use). Line 6 also contains a comment, but this time directly after a statement.

Lines 3–9 are *indented* (which means shifted to the right). By convention, most Pythonistas^[People using Python] use *four spaces* to denote one level of indentation. Indented lines of code belong together. For example, lines 3–9 below `def do_something(n_times=10):` define a block of code belonging to that `def` statement (note that statements introducing a block always end with a colon). Within this block, there are two additional blocks defined by additional indentation (lines 5–8 and lines 7–8, respectively).

Blocks are necessary to define scopes, something which we will discuss later in this course.

Finally, the example contains *function calls*. We will discuss functions in detail later in this course, but for now you can think of a function as a mini-script. Whenever you call a function, Python runs the whole mini-script defined by the function. The syntax for calling a function is a pair of parenthesis `()` right after the function name. In the example code, `range(n_times)`, `print(i)`, `print("Odd")`, `do_something()`, and `print(counter)` are all function calls. Note that you can supply so-called *arguments* between the parentheses if the function takes parameters. All function calls in the example have exactly one argument, except for `do_something()`, which has no argument. Arguments allow us to pass additional information to the function (but again, more on functions later).

Like most programming languages, Python is very picky about correct syntax. For example, capitalization matters, so `print` is not the same as `Print`. A missing `:` in places where a colon should be triggers a syntax error. Incorrect indentation can either lead to a syntax error or to non-intended behavior (which means the Python program runs without errors, but does not do what the programmer intended). It is very instructive to try out invalid code in the interactive interpreter, for example:

```{python}
#| error: true
Print("Hello")
```

It is important to be familiar with Python error messages to interpret them correctly and efficiently (after all, the goal should be to fix them), so make errors and learn from them!


## Code style

There are also stylistic issues that Python does not care about at all. The following three statements are equivalent for Python:

```{python}
x = 1 + 2 + 3 * (16 - 7)
x=1+    2+  3*  (   16-7    )
x=1+2+3*(16-7)
```

Arguably, the first statement is much easier to read than the other two. The [Python Enhancement Proposal 8 (PEP8)](https://www.python.org/dev/peps/pep-0008/) summarizes coding conventions that describe how Python code should look like to enhance readability. It is worth going through the document (at least superficially), but if you have installed the Ruff extension in Visual Studio Code (as described previously), you can simply let the extension format your code using the "Ruff: Format document" as well as "Ruff: Format imports" actions.


### Online courses

There are many introductory and more advanced courses on Python. Here is a small selection of free courses that you might want to take after this class (or even alongside it):

- [Learn to Program: The Fundamentals](https://www.coursera.org/learn/learn-to-program)
- [Learn to Program: Crafting Quality Code](https://www.coursera.org/learn/program-code)
- [Programming for Everybody (Getting Started with Python)](https://www.coursera.org/learn/python)
- [Python Data Structures](https://www.coursera.org/learn/python-data)
- [An Introduction to Interactive Programming in Python (Part 1)](https://www.coursera.org/learn/interactive-python-1)
- [An Introduction to Interactive Programming in Python (Part 2)](https://www.coursera.org/learn/interactive-python-2)
- [Learn Python](http://www.learnpython.org/)


### Books

Classic books or websites are also excellent for self-study. Here is a small selection of free resources:

- [Think Python](http://greenteapress.com/wp/think-python/)
- [A Byte of Python](http://python.swaroopch.com/)
- [Python for You and Me](http://pymbook.readthedocs.io/en/latest/)
- [Real Python](https://realpython.com)


## Exercises

### Exercise 1

List all installed packages in your Python installation – which command do you use, and what does the list look like? How many packages are installed on your system?


### Exercise 2

First, update all installed packages. Then check if the `ipython` package is installed – if not, install it! Perform the same steps for the `numpy` package. Finally, uninstall the `numpy` package.


### Exercise 3

Create a Python script named `test.py` in Visual Studio Code. The script should simply print *Hello World!* to the screen (use the `print` function). Try to follow this structure:

- The first line should be a comment with your name
- The second line should be empty
- The third line should contain the `print` function
- The last line should be empty

Make sure your script follows PEP8 conventions (use the Ruff extension to automatically format the code). Also, run your script to ensure the code works correctly and produces no errors.


### Exercise 4

Inspect the documentation for the `print` and `sum` functions directly in the Python interpreter.


### Exercise 5

Desribe how you can run a Python script in Visual Studio Code! In addition, explain how you can run a single line or multiple selected lines in the interactive interpreter directly in Visual Studio Code!
