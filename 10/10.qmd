---
title: "10 – Grafiken"
subtitle: "Einführung in Python und PsychoPy"
author: "Clemens Brunner"
date: 2024-01-11
format:
  html:
    page-layout: full
engine: jupyter
highlight-style: github
title-block-banner: true
theme:
  light: flatly
  dark: darkly
lang: de
author-title: "Autor"
published-title: "Veröffentlicht"
---

## Allgemeines

In Python gibt es eine große Anzahl an Paketen, welche sich auf das Erstellen von Grafiken spezialisiert haben. Eine grafische Übersicht über dieses Ökosystem gibt es [hier](https://rougier.github.io/python-visualization-landscape/landscape-colors.html), die bekanntesten Pakete sind momentan:

- [Matplotlib](http://matplotlib.org/)
- [Bokeh](https://docs.bokeh.org/en/latest/)
- [Plotly](https://plotly.com/python/)
- [Seaborn](http://seaborn.pydata.org/)
- [Vega-Altair](https://altair-viz.github.io/)

Matplotlib ist das älteste und bekannteste Paket, es ist aber manchmal etwas umständlich zu bedienen – dafür ist es möglich, Grafiken bis ins kleinste Detail anzupassen. Außerdem basieren viele Grafikpakete auf Matplotlib, daher ist es jedenfalls hilfreich, wenn man zumindest ein grundlegendes Verständnis von Matplotlib besitzt.

Bokeh und Plotly können vor allem interaktive Grafiken für Webanwendungen erstellen. Seaborn und Vega-Altair haben sich auf statistische Grafiken spezialisiert. Seaborn baut auf Matplotlib auf und bietet sehr viele zusätzliche Grafiktypen. Vega-Altair hat sich das Ziel gesetzt, komplexe Grafiken möglichst einfach erstellen zu können. Auch interaktive Grafiken können damit erzeugt werden.

Neben diesen häufig verwendeten Paketen gibt es noch [plotnine](https://github.com/has2k1/plotnine), welches sehr ähnlich wie [ggplot2](https://ggplot2.tidyverse.org/) für R zu verwenden ist.

Auf [dieser](https://aeturrell.github.io/coding-for-economists/vis-common-plots.html) und [dieser](http://pythonplot.com/) Website kann man die Erstellung einiger typischer Grafiken mit den unterschiedlichen Paketen vergleichen.

Kurz zusammengefasst kann man also die Pakete Matplotlib, seaborn und plotnine zur Erzeugung von klassischen *statischen* Grafiken sowie Vega-Altair, Bokeh und Plotly zur Erstellung von *interaktiven* Grafiken empfehlen.


## Matplotlib

Mit Matplotlib kann man verschiedenste Grafiken vor allem für wissenschaftliche Zwecke erstellen. Meist stehen die darzustellenden Daten als NumPy-Arrays zur Verfügung.

:::{.callout-note}
Die offizielle Matplotlib-Website beinhaltet einige [Tutorials](https://matplotlib.org/stable/tutorials/index.html). Insbesondere die ersten beiden eignen sich sehr gut für den Einstieg und sind eine gute Ergänzung zu den Unterlagen dieser Einheit:

- [Basis-Tutorial Matplotlib](https://matplotlib.org/stable/tutorials/introductory/quick_start.html)
- [Pyplot-Tutorial](https://matplotlib.org/stable/tutorials/introductory/pyplot.html#sphx-glr-tutorials-introductory-pyplot-py)
:::

Wir beginnen wie immer mit den entsprechenden Import-Befehlen:

```{python}
import numpy as np
import matplotlib.pyplot as plt
```

Beachten Sie, dass wir `matplotlib.pyplot` (unter dem Namen `plt`) importieren und nicht direkt `matplotlib`. Dies hat historische Gründe, denn die allermeisten Funktionen zur Erstellung von Grafiken befinden sich in `matplotlib.pyplot`.

:::{.callout-tip}
In IPython sollte man zusätzlich folgenden Befehl ausführen, damit Grafikfenster sich unmittelbar öffnen und den Interpreter nicht blockieren:

```
%matplotlib
```

Im normalen interaktiven Python-Interpreter kann man direkt nach dem Importieren folgenden Befehl eingeben:

```python
plt.ion()
```
:::


### Erstellung von Grafiken

Um mit Matplotlib Grafiken zu erzeugen, sollte man sich mit einigen Grundbegriffen sowie dem Aufbau einer Grafik vertraut machen, was in der folgenden Grafik veranschaulicht wird (modifiziert von [hier](https://matplotlib.org/stable/gallery/showcase/anatomy.html)):

```{python}
#| echo: false
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.patches import Circle
from matplotlib.patheffects import withStroke
from matplotlib.ticker import AutoMinorLocator, MultipleLocator

np.random.seed(19680801)

X = np.linspace(0.5, 3.5, 100)
Y1 = 3 + np.cos(X)
Y2 = 1 + np.cos(1 + X/0.75) / 2
Y3 = np.random.uniform(Y1, Y2, len(X))

fig = plt.figure(figsize=(8.5, 7.5))
ax = fig.add_axes([0.2, 0.17, 0.68, 0.7], aspect=1)

ax.xaxis.set_major_locator(MultipleLocator(1.000))
ax.xaxis.set_minor_locator(AutoMinorLocator(4))
ax.yaxis.set_major_locator(MultipleLocator(1.000))
ax.yaxis.set_minor_locator(AutoMinorLocator(4))
ax.xaxis.set_minor_formatter("{x:.2f}")

ax.set_xlim(0, 4)
ax.set_ylim(0, 4)

ax.tick_params(which="major", width=1.0, length=10, labelsize=14)
ax.tick_params(which="minor", width=1.0, length=5, labelsize=10, labelcolor="0.25")

ax.grid(linestyle="--", linewidth=0.5, color=".25", zorder=-10)

ax.plot(X, Y1, c="C0", lw=2.5, label="Blue signal", zorder=10)
ax.plot(X, Y2, c="C1", lw=2.5, label="Orange signal")
ax.plot(
    X[::3],
    Y3[::3],
    linewidth=0,
    markersize=9,
    marker="s",
    markerfacecolor="none",
    markeredgecolor="C4",
    markeredgewidth=2.5
)

ax.set_title("Anatomy of a figure", fontsize=20, verticalalignment="bottom")
ax.set_xlabel("x Axis label", fontsize=14)
ax.set_ylabel("y Axis label", fontsize=14)
ax.legend(loc="upper right", fontsize=14)


def annotate(x, y, text, code, color=[0, 20/256, 82/256]):
    c = Circle(
        (x, y),
        radius=0.15,
        clip_on=False,
        zorder=10,
        linewidth=2.5,
        edgecolor=color + [0.6],
        facecolor="none",
        path_effects=[withStroke(linewidth=7, foreground="white")]
    )
    ax.add_artist(c)

    for path_effects in [[withStroke(linewidth=7, foreground="white")], []]:
        col = "white" if path_effects else color
        ax.text(
            x,
            y - 0.2,
            text,
            zorder=100,
            ha="center",
            va="top",
            weight="bold",
            color=col,
            style="italic",
            fontfamily="Courier New",
            path_effects=path_effects
        )

        col = "white" if path_effects else "black"
        ax.text(
            x,
            y - 0.33,
            code,
            zorder=100,
            ha="center",
            va="top",
            weight="normal",
            color=col,
            fontfamily="monospace",
            fontsize="medium",
            path_effects=path_effects
        )


annotate(3.5, -0.13, "Minor tick label", "ax.xaxis.set_minor_formatter")
annotate(-0.03, 1.0, "Major tick", "ax.yaxis.set_major_locator")
annotate(0.00, 3.75, "Minor tick", "ax.yaxis.set_minor_locator")
annotate(-0.15, 3.00, "Major tick label", "ax.yaxis.set_major_formatter")
annotate(1.68, -0.39, "xlabel", "ax.set_xlabel")
annotate(-0.38, 1.67, "ylabel", "ax.set_ylabel")
annotate(1.52, 4.15, "Title", "ax.set_title")
annotate(1.75, 2.80, "Line", "ax.plot")
annotate(2.25, 1.54, "Markers", "ax.scatter")
annotate(3.00, 3.00, "Grid", "ax.grid")
annotate(3.60, 3.58, "Legend", "ax.legend")
annotate(2.5, 0.55, "Axes", "fig.subplots", color=[1, 0, 0])
annotate(4, 4.5, "Figure", "plt.figure", color=[1, 0, 0])
annotate(0.65, 0.01, "x Axis", "ax.xaxis")
annotate(0, 0.36, "y Axis", "ax.yaxis")
annotate(4.0, 0.7, "Spine", "ax.spines")

_ = fig.patch.set(linewidth=2, edgecolor="0.5")
```

Für den Anfang benötigen wir aber nur die zwei Begriffe `Figure` und `Axes` (in der Abbildung rot dargestellt): Eine `Figure` entspricht einer Abbildung, welche eine oder mehrere Grafiken (sogenannte `Axes`) enthalten kann.

Die Funktion `plt.subplots` erzeugt eine `Figure` und die gewünschte Anzahl an `Axes`. Möchte man also z.B. eine Abbildung mit einer einzigen Grafik erzeugen, erstellt man diese leeren Objekte mit folgendem Befehl:

```{python}
fig, ax = plt.subplots()
```

Die Funktion gibt die `Figure` sowie die `Axes` zurück; wir nennen diese `fig` bzw. `ax`. Danach kann man Methoden des `Axes`-Objekts (welches wir `ax` genannt haben) aufrufen, um die gewünschte Grafik zu erstellen (mehr dazu im nächsten Abschnitt).

Wenn man mehrere Grafiken in einer Abbildung kombinieren möchte, kann man mit `plt.subplots` eine `Figure` sowie die gewünschte Anzahl an `Axes` erzeugen. Dazu verwendet man das erste bzw. die ersten beiden Argumente, welche der Anzahl an Zeilen bzw. Spalten, in denen die Grafiken angeordnet werden sollen, entsprechen:

```python
fig, axes = plt.subplots(1, 3)  # 1 Zeile, 3 Spalten
```

```{python}
#| echo: false
fig, axes = plt.subplots(1, 3, figsize=(9, 4))  # 1 Zeile, 3 Spalten
```

In diesem Beispiel erzeugen wir eine `Figure`, welche drei `Axes` beinhaltet, die in einer Zeile und drei Spalten angeordnet sind. In anderen Worten sind das also drei Grafiken, die nebeneinander dargestellt werden. Diese drei `Axes`-Objekte haben wir `axes` genannt, und dabei handelt es sich um ein eindimensionales NumPy-Array. Wir können daher auf die einzelnen Elemente mittels `axes[0]`, `axes[1]` und `axes[2]` zugreifen und damit die gewünschten Grafiken erzeugen.

Auch eine echte zweidimensionale Anordnung, bestehend aus mehreren Zeilen und Spalten, ist so möglich. Zu beachten ist in diesem Fall aber, dass die zurückgegebenen Achsen in einem zweidimensionalen NumPy-Array vorhanden sind. Daher kann man die einzelnen `Axes`-Objekte auch mit einem zweidimensionalen Index (also Zeile und Spalte) ansprechen, z.B. `axes[0][2]` wäre das `Axes`-Objekt in Zeile 0 (also erste Zeile) und Spalte 2 (also dritte Spalte).

Damit sich in einer `Figure` mit mehreren `Axes`-Objekten keine Überlappungen ergeben, sollten Sie zum Abschluss folgende Zeile hinzufügen:

```python
fig.set_tight_layout(True)
```

Dies bewirkt, dass die Abstände zwischen den `Axes`-Objekten so angepasst werden, dass keine Texte oder andere Elemente abgeschnitten werden oder überlappen.

Sehen wir uns die Auswirkung anhand eines Beispiels an. Zunächst erzeugen wir eine Grafik mit 2 Zeilen und 3 Spalten und verwenden das Standard-Layout:

```{python}
fig, axes = plt.subplots(2, 3)
```

Und so sieht die Grafik mit optimiertem Layout aus:

```{python}
fig, axes = plt.subplots(2, 3)
fig.set_tight_layout(True)
```


### x/y-Grafiken

Matplotlib unterstützt viele unterschiedliche [Grafiktypen](https://matplotlib.org/stable/plot_types/index.html). Als erstes sehen wir uns an, wie wir Liniengrafiken (z.B. zur Darstellung von Zeitverläufen) erstellen können. Dazu verwenden wir die folgenden Beispieldaten `x` und `y`:

```{python}
x = np.linspace(0, 10, 100)
y = np.sin(x)
```

Eine Liniengrafik erhält man dann durch Aufruf der `plot`-Methode, welcher man die Daten für die x- bzw. y-Achsen übergibt:

```{python}
fig, ax = plt.subplots()
ax.plot(x, y)
```

Zur Erstellung eines Scatterplots verwendet man die Methode `scatter`, welche sinnvolle Standardwerte für diesen Grafiktyp bietet:

```python
fig, ax = plt.subplots()
ax.scatter(x, y)
```

```{python}
#| echo: false
fig, ax = plt.subplots()
_ = ax.scatter(x, y)
```


### Balken- und Stängelgrafiken

Für eine Balkengrafik benötigt man die Höhen der einzelnen Balken sowie die Positionen der Balken auf der x-Achse:

```{python}
x = np.arange(8)
y = [17, 5, 23, 33, 12, 21, 27, 18]
```

Diese Werte kann man dann mit der `bar`-Methode darstellen:

```python
fig, ax = plt.subplots()
ax.bar(x, y)
```

```{python}
#| echo: false
fig, ax = plt.subplots()
_ = ax.bar(x, y)
```

Dieselben Werte könnte man auch als Stängelgrafik visualisieren:

```python
fig, ax = plt.subplots()
ax.stem(x, y)
```

```{python}
#| echo: false
fig, ax = plt.subplots()
_ = ax.stem(x, y)
```

### Histogramme

Auch statistische Grafiken können erzeugt werden. Dazu erstellen wir zunächst neue Beispieldaten `x` (10000 normalverteilte Zufallszahlen mit Mittelwert 100 und Standardabweichung 15):

```{python}
from numpy.random import default_rng

rng = default_rng(1)
x = rng.normal(loc=100, scale=15, size=10000)
```

Nun können wir die Verteilung von `x` als Histogramm darstellen:

```python
fig, ax = plt.subplots()
ax.hist(x, bins=50, edgecolor="white")
```

```{python}
#| echo: false
fig, ax = plt.subplots()
_ = ax.hist(x, bins=50, edgecolor="white")
```

In diesem Beispiel haben wir die Anzahl der Bins manuell auf 50 gesetzt. Außerdem verwenden wir eine weiße Randfarbe, um die einzelnen Balken besser voneinander abzugrenzen.

:::{.callout-tip}
Alle Methoden (also z.B. auch `plot`, `scatter`, `bar`, `stem`) haben optionale Argumente, mit denen man das Aussehen der Grafik anpassen kann. Diese sind in den jeweiligen Dokumentationen beschrieben.
:::


### Boxplots

Auch Boxplots dienen zur Visualisierung der Verteilung einer oder auch mehrerer Variablen. Erzeugen wir daher die folgenden drei Beispiel-Arrays:

```{python}
x = rng.normal(loc=0, scale=5, size=10000)
y = rng.exponential(5, size=10000)
z = rng.poisson(2.8, size=10000)
```

Die Verteilungen der drei Variablen können wir mit drei Boxplots darstellen:

```python
fig, ax = plt.subplots()
ax.boxplot([x, y, z])
```

```{python}
#| echo: false
fig, ax = plt.subplots()
_ = ax.boxplot([x, y, z])
```


### Violinplots

Eine Alternative zu Boxplots sind sogenannte Violinplots. Die Daten aus dem vorigen Abschnitt könnte man also auch so darstellen:

```python
fig, ax = plt.subplots()
ax.violinplot([x, y, z])
```

```{python}
#| echo: false
fig, ax = plt.subplots()
_ = ax.violinplot([x, y, z])
```


### Weitere statistische Grafiken

Matplotlib bietet über die genannten statistischen Grafiktypen nicht mehr wesentlich mehr. Möchte man beispielsweise Scatterplots mit überlagerten Regressionsgeraden oder andere komplexere Grafiktypen erstellen, sollte man einen Blick auf andere Pakete wie seaborn oder plotnine werfen. Mit Matplotlib wäre das zwar prinzipiell auch möglich, aber es wären sehr viele manuelle Schritte notwendig (z.B. müsste man selbst ein lineares Regressionsmodell rechnen, um dieses dann in eine Grafik einzubinden).


### Titel und Achsenbeschriftungen

Matplotlib fügt den Grafiken standardmäßig keine Titel oder Achsenbeschriftungen hinzu. Selbstverständlich kann man das aber anpassen, und zwar mit speziellen Methoden. Nehmen wir als Beispiel nochmals die allererste Grafik, die wir in diesen Unterlagen erzeugt haben:

```{python}
x = np.linspace(0, 10, 100)
y = np.sin(x)

fig, ax = plt.subplots()
ax.plot(x, y)
```

Wir können dieser Grafik einen Titel sowie Achsenbeschriftungen hinzufügen:

```python
fig, ax = plt.subplots()
ax.plot(x, y)
ax.set_title("Eine Sinuskurve")
ax.set_xlabel("Zeit (s)")
ax.set_ylabel("Amplitude (V)")
```

```{python}
#| echo: false
fig, ax = plt.subplots()
ax.plot(x, y)
ax.set_title("Eine Sinuskurve")
ax.set_xlabel("Zeit (s)")
_ = ax.set_ylabel("Amplitude (V)")
```

Alternativ könnte man statt den drei separaten Methoden auch folgende Variante verwenden:

```python
fig, ax = plt.subplots()
ax.plot(x, y)
ax.set(title="Eine Sinuskurve", xlabel="Zeit (s)", ylabel="Amplitude (V)")
```

```{python}
#| echo: false
fig, ax = plt.subplots()
ax.plot(x, y)
_ = ax.set(title="Eine Sinuskurve", xlabel="Zeit (s)", ylabel="Amplitude (V)")
```


## Übungen

### Übung 1

Lesen Sie die Daten in der Datei [`airquality.csv`](airquality.csv) mit folgendem Code in ein NumPy-Array namens `air` ein (beachten Sie, dass sich die Datei im Arbeitsverzeichnis befinden muss):

```Python
import numpy as np
air = np.genfromtxt("airquality.csv", delimiter=",", skip_header=1)
```

Dieser Datensatz den Verlauf von vier verschiedenen Luftgütewerten über einen Zeitraum von fünf Monaten.

Mit welchem Befehl können Sie die Anzahl der Zeilen und Spalten von `air` herausfinden?


### Übung 2

Die Spalten in `air` beinhalten Messwerte für folgende Variablen:

1. Ozonkonzentration (in ppb, oder "parts per billion")
2. Sonneneinstrahlung (in der Einheit Langleys)
3. Windgeschwindigkeit (in Meilen pro Stunde)
4. Temperatur (in Grad Fahrenheit)
5. Monat (Zahlenwert zwischen 1 und 12)
6. Tag (Zahlenwert zwischen 1 und 31)

Erstellen Sie für jede Spalte einen eigenen Namen (verwenden Sie die Namen `ozone`, `solar`, `wind`, `temp`, `month` und `day`). Verwenden Sie diese Namen in allen folgenden Übungen.


### Übung 3

Erzeugen Sie mit Matplotlib ein Histogramm der Wind-Werte.


### Übung 4

Erstellen Sie mit Matplotlib einen Scatterplot mit der Temperatur auf der x-Achse und dem Wind auf der y-Achse.


### Übung 5

Stellen Sie folgende vier Grafiken in einer Abbildung dar (verwenden Sie dazu eine Anordung aus zwei Zeilen und zwei Spalten):

1. Ein Scatterplot von `ozone` gegen `solar`.
2. Eine Liniengrafik mit dem Verlauf von `temp`.
3. Ein Violinplot mit den Werten von `temp` für die fünf Monate. Die Werte für diese Monate entsprechen den folgenden Slices: `temp[:31]`, `temp[31:61]`, `temp[61:92]`, `temp[92:123]`, `temp[123:]`.
4. Ein Scatterplot von `wind` gegen `ozone`.

Fügen Sie geeignete Achsenbeschriftungen hinzu und vergessen Sie nicht, zum Schluss `fig.set_tight_layout(True)` aufzurufen!
